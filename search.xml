<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>token-economy</title>
      <link href="/token-economy/"/>
      <url>/token-economy/</url>
      
        <content type="html"><![CDATA[<p>from the book &lt;<token economy how the web3 reinvents the Internet>&gt;.</p><h1 id="Web3-basics"><a href="#Web3-basics" class="headerlink" title="Web3 basics"></a>Web3 basics</h1><h2 id="Tokenized-Networks-Web3-the-Stateful-Web"><a href="#Tokenized-Networks-Web3-the-Stateful-Web" class="headerlink" title="Tokenized Networks:  Web3, the Stateful Web"></a>Tokenized Networks:  Web3, the Stateful Web</h2><p> The Web3 changes the data structures in the backend of the Internet, introducing a universal state layer, often by incentivizing network actors with a token.<br>The backbone of this Web3 is represented by a series of blockchain networks or similar distributed ledgers.<br>The Web2 allowed us to enjoy peer-to-peer (P2P) interactions on a global scale, but always with a middleman: a platform acting as a trusted intermediary。</p><p>State refers to information, or the status of “Who is who?”; “Who owns what?”; and “Who has the right to do what?” in a network. </p><h2 id="Decentralized-Applications-in-the-Web3"><a href="#Decentralized-Applications-in-the-Web3" class="headerlink" title="Decentralized Applications in the Web3"></a>Decentralized Applications in the Web3</h2><p>A decentralized application is a blockchain client - often also referred to as the “wallet.” It uses the same technologies to render a webpage or a mobile app (like HTML, CSS, Javascript) but communicates with a blockchain network instead of a server and, in the case of smart contract networks,<br>How can a “wallet” get ledger data(nodes info) ?</p><h2 id="Keeping-Track-of-the-Tokens-Bitcoin-Blockchain-amp-Other-Distributed-Ledgers"><a href="#Keeping-Track-of-the-Tokens-Bitcoin-Blockchain-amp-Other-Distributed-Ledgers" class="headerlink" title="Keeping Track of the Tokens: Bitcoin, Blockchain, &amp; Other Distributed Ledgers"></a>Keeping Track of the Tokens: Bitcoin, Blockchain, &amp; Other Distributed Ledgers</h2><p>Blockchain networks build on the idea of P2P networks, providing a universal data set that every actor can trust, even though they might not know or trust each other. Immutable copies of that data are stored and managed on every node in the network.  (How can I get the immutable<br>copy of data (the ledger) ?)</p><p><strong>Chain of Blocks</strong>: In a blockchain network, token transactions are recorded in batches of data called “blocks” that are “hashed.” This cryptographic hash creates a digital fingerprint of the block . Each block includes the hash of the prior block, thereby linking one block with another into a chain of blocks. This process guarantees the historic integrity of all the blocks back to the first block, also referred to as the genesis block. </p><p>*<strong>he ledger</strong> is a file that maintains a growing list of transaction records, chained in blocks that are cryptographically secured from tampering and revision.the ledger of a blockchain network is a document that is not centrally stored. Instead, each node of the network keeps an identical copy of the same file at all times (with temporary exceptions every time a new block is created).<br><strong>Distributed Ledger</strong>: A copy of the ledger is stored on multiple nodes of a cryptographically secured P2P network. In order to change the ledger data on all copies of the ledger throughout the whole network, the network nodes need to reach a mutual agreement about such a change.Each independent node has the latest version of the ledger （how can I get this?）, which contains all transactions that have ever been made, and can verify transactions.<br><strong>Tokens</strong>:  a token does not represent a digital file that is sent from one device to the other. Instead, it manifests as an entry in the ledger that belongs to a blockchain address. Only the person who has the private key for that address can access the respective tokens,<br>using a wallet software, which acts as a blockchain client (read more:</p><p>Every node of network is a client as well as a server,holding indentical copies of application<br>state  (the ledger).</p><h2 id="Cryptoeconomics-Consensus-amp-Proof-of-Work"><a href="#Cryptoeconomics-Consensus-amp-Proof-of-Work" class="headerlink" title="Cryptoeconomics, Consensus &amp; Proof-of-Work"></a>Cryptoeconomics, Consensus &amp; Proof-of-Work</h2><p>When tokens are sent over the network, each node in the network can propose new entries to be added to the ledger. These nodes validate transactions and compete with each other to solve a complex computational puzzle. In this process, they have to collect all recent network transactions, including some additional metadata, verify the transactions, guess a pseudo-random number (“nonce”), and run all the data through a cryptographic algorithm (SHA-256) to find the hash of the new block. This means that they have to perform computational work, which is the reason why this process is referred to as “Proof-of-Work.”</p><p>If a node is the first one in the network to find that hash value, it can add the block to its ledger and broadcast the hash value of the new block, including all block data, to the rest of the network. The other nodes can now verify the validity of the hash. If they accept this newly added block of transactions as valid, they add the new block to their copy of the ledger.The winning node is rewarded with the “block reward” in the form of newly minted network tokens (plus potential transaction fees). This is why the process is referred to as “mining.”</p><h2 id="smart-contract"><a href="#smart-contract" class="headerlink" title="smart contract"></a>smart contract</h2><p>many smart contract use cases will only be possible interplaying with other technologies like big data applications and the “Internet of Things.”<br>use case:Alice wants to buy Bob’s second-hand car using web3 page 341.</p><blockquote><p>Szabo justified the term “smart” with the functionality that comes with digital contracts to be automatically verified and executed:</p></blockquote><h2 id="institutional-economies-of-web3-or-other-DAOs"><a href="#institutional-economies-of-web3-or-other-DAOs" class="headerlink" title="institutional economies of web3 or other DAOs"></a>institutional economies of web3 or other DAOs</h2><p>DAOs tackle an age-old problem of governance which is referred to as the “principal-agent dilemma,” which occurs when the agent of an organization has the power to make decisions on behalf of, or impacting, the principal—another person or entity in the organization. Examples thereof could be managers that act on behalf of shareholders or politicians that act on behalf of citizens.<br>This dilemma usually increases when there is underlying information asymmetry at play.</p><h2 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h2><p>Traditionally, tokens can represent any form of economic value or access right. Shells and beads were probably the earliest types of tokens used.  Paper money or coins are also tokens.</p><h3 id="Properties-of-Tokens"><a href="#Properties-of-Tokens" class="headerlink" title="Properties of Tokens"></a>Properties of Tokens</h3><ul><li>Rights Perspective</li><li>“Asset tokens” can represent a unit of account (fungible) or a unique good (non-fungible).</li><li>“Credentials tokens” can be used to attest identity</li><li>Fungibility Perspective: Fungibility refers to the interchangeability of a unit of an asset with other units of the same asset.Fungible assets have two key properties: (i) Only quantity matters, which means that units of fungible assets of the same kind are indistinguishable. (ii) Any amount can be merged or divided into a larger or smaller amount of it, making it indistinguishable from the rest. If you were to lend 10 EUR to someone, for example, it would not matter if that person returns the exact same 10 EUR bill or another one, </li><li>Transferability Perspective:</li><li>Durability Perspective: In economics, durability refers to the ability of a currency to withstand repeated use</li></ul><h1 id="The-Future-of-Money-amp-Decentralized-Finance-DeFi"><a href="#The-Future-of-Money-amp-Decentralized-Finance-DeFi" class="headerlink" title="The Future of Money &amp; Decentralized Finance (DeFi)"></a>The Future of Money &amp; Decentralized Finance (DeFi)</h1><p>The primary purpose of money is to facilitate an economic exchange of goods and services within and between economies， avoiding the inefficiencies of such systems like the “coincidence of wants” problem.<br>The coincidence of wants problem refers to the improbability that two parties, each of which own different goods, can agree on a deal, unless each party wants the specific good the other party offers,<br>Money needs to serve as a medium of exchange, store of value, and unit of account in which debt can be denominated.</p><h2 id="Types-of-Money"><a href="#Types-of-Money" class="headerlink" title="Types of Money"></a>Types of Money</h2><p> the dominant type of money is fiat money. Prior to the existence of modern day fiat currencies, commodity money and representative money were in widespread use.</p>]]></content>
      
      
      
        <tags>
            
            <tag> web3 </tag>
            
            <tag> smart-contract </tag>
            
            <tag> distributed-ledger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>common-vim-commands</title>
      <link href="/common-vim-commands/"/>
      <url>/common-vim-commands/</url>
      
        <content type="html"><![CDATA[<pre class="language-none"><code class="language-none">行移动：$:  将光标移动到当前行的行尾0:  将光标移动到当前行的行首在屏幕中移动:gg:  移动到文件开头M:  移动到屏幕中间L:  移动到一屏末尾字符删除:x:  删除当前光标所在处的字符X:  删除当前光标左边的字符行删除:dd:  删除当前光标处的一整行&#x3D;D文本复制、剪切与粘贴:y:  复制，p:粘贴yy:  复制一整行撤销修改、重做与保存:u:  撤销上一步的操作。文本的查找与替换:&#x2F;string   正向查找?string   反向查找设置高亮显示    :set hls    *按键将当前光标处的单词高亮显示，使用n浏览下一个查找高亮的结果:wq save and exit</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>adptive-thinkng</title>
      <link href="/adptive-thinkng/"/>
      <url>/adptive-thinkng/</url>
      
        <content type="html"><![CDATA[<h2 id="作为计算机的脑：隐喻的社会起源"><a href="#作为计算机的脑：隐喻的社会起源" class="headerlink" title="作为计算机的脑：隐喻的社会起源"></a>作为计算机的脑：隐喻的社会起源</h2><p>大约1800年，智力与计算产生了概念分离，这是由于新的社会工作组织引发的。这种概念分离使得机械计算（及<br>最终的计算机）成为可能。</p><h3 id="作为工厂的计算机"><a href="#作为工厂的计算机" class="headerlink" title="作为工厂的计算机"></a>作为工厂的计算机</h3><p>at the end of 19 century,计算开始从开明人士和专家们的专利变成了无技能的体力劳动者的附属品。促进这一转变<br>的力量是制造业中大规模的劳动分工。在计算沦为无需技能的工人大军的重复性任务后，巴贝奇才能够设想用机械计算机来<br>代替人类“计算着”。</p><p>计算机被称为物理符号系统。</p>]]></content>
      
      
      
        <tags>
            
            <tag> psychology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>termux-settings</title>
      <link href="/termux-settings/"/>
      <url>/termux-settings/</url>
      
        <content type="html"><![CDATA[<h2 id="获取手机存储访问权限"><a href="#获取手机存储访问权限" class="headerlink" title="获取手机存储访问权限"></a>获取手机存储访问权限</h2><pre class="language-none"><code class="language-none">termux-setup-storage</code></pre><h2 id="set-user-account-for-termux"><a href="#set-user-account-for-termux" class="headerlink" title="set user account for termux"></a>set user account for termux</h2><pre class="language-none"><code class="language-none">whoami#set new passpasswd</code></pre><h2 id="install-and-set-ssh"><a href="#install-and-set-ssh" class="headerlink" title="install and set ssh"></a>install and set ssh</h2><p>start sshd</p><pre class="language-none"><code class="language-none">apt install opensshsshd -p8022</code></pre><p>delete old host key in file <code>known_hosts</code> from client<br>e.g. <code>C:\Users\Admin\.ssh\known_hosts</code></p><h2 id="set-on-my-zsh"><a href="#set-on-my-zsh" class="headerlink" title="set on-my-zsh"></a>set on-my-zsh</h2><pre class="language-none"><code class="language-none">apt install curl zsh gitsh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;gitee.com&#x2F;sherkeyxd&#x2F;termux-ohmyzsh&#x2F;raw&#x2F;master&#x2F;install.sh)&quot;</code></pre><p>add plugin <code>autosuggestions</code></p><pre class="language-none"><code class="language-none"># 拷贝到 plugins 目录下(or use alternative repo from gitee)git clone git:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions $ZSH_CUSTOM&#x2F;plugins&#x2F;zsh-autosuggestions</code></pre><p>在 ~/.zshrc 中配置：</p><pre class="language-none"><code class="language-none">plugins&#x3D;(其他的插件 zsh-autosuggestions)</code></pre><h2 id="install-linux-distribution"><a href="#install-linux-distribution" class="headerlink" title="install linux distribution"></a>install linux distribution</h2><pre class="language-none"><code class="language-none">pkg install proot-distroproot-distro listproot-distro install ubuntu# or save command to a scriptproot-distro login ubuntu</code></pre><h2 id="settings-in-linux-distribution"><a href="#settings-in-linux-distribution" class="headerlink" title="settings in linux distribution"></a>settings in linux distribution</h2><h3 id="install-ssh"><a href="#install-ssh" class="headerlink" title="install ssh"></a>install ssh</h3><pre class="language-none"><code class="language-none">apt updateapt install openssh-server</code></pre><p>modify sshd_config</p><pre class="language-none"><code class="language-none">vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</code></pre><p>把Port 22改为 9022，注意不能是22，也不能是8022<br>把PermitRootLogin那一行，注释去掉，改为PermiRootLogin yes</p><p>start sshd</p><pre class="language-none"><code class="language-none">&#x2F;etc&#x2F;init.d&#x2F;ssh stop&#x2F;etc&#x2F;init.d&#x2F;ssh start</code></pre><p>check status of sshd</p><pre class="language-none"><code class="language-none">&#x2F;etc&#x2F;init.d&#x2F;ssh status</code></pre><p>get username <code>whoami</code><br>最终还是失败不是ssh的问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> termux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>influence</title>
      <link href="/influence/"/>
      <url>/influence/</url>
      
        <content type="html"><![CDATA[<ol><li><p>the contrast principle(对比)</p></li><li><p>reciprocation rule(互惠，The Old Give and Take…and Take) .<br>By virtue of the reciprocity rule, then, we are obligated to the future repayment of favors, gifts, invitations, and the like. </p></li><li><p>commitment and consistency.<br>Once we have made a choice or taken a stand, we will encounter personal and interpersonal pressures to behave consistently with that commitment. Those pressures will cause us to respond in ways that justify our earlier decision.</p></li><li><p>social proof （从众？）.<br>example/situation:在音频或视频中插入笑声。<br>It states that one means we use to determine what is correct is to find out what other people think is correct.</p></li></ol><p>it provides a convenient shortcut for determining how to behave but, at the same time, makes one who uses the shortcut vulnerable to the attacks of profiteers who lie in wait along its path.<br> 5. liking.<br> situation:被朋友邀请参加party,朋友带货买东西，自己似乎不得不买个东西</p><p> we most prefer to say yes to the requests of someone we know and like.<br> 6. authority. Obedience of authority.<br> 7. scarcity .the rule of the few.<br> example : deadline tactic.</p><p> Freedoms once granted will not be relinquished without a fight.</p>]]></content>
      
      
      <categories>
          
          <category> book-digest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>creative-thinking</title>
      <link href="/creative-thinking/"/>
      <url>/creative-thinking/</url>
      
        <content type="html"><![CDATA[<ul><li>We humans cannot make anything out of nothing.The potentisl materials<br>are all here in our universe.</li><li>Think by analogy,learn from nature.</li><li>make the strange familiar and make the familiar strange. Things,people and ideas are familiar<br>we stop thinking about them.</li><li>widen your span of relavence. Transfer knowledge from one field to another.have knowledge in<br>more than one field.</li><li>Explorer into the known often make unexpected discoveries. have a wide span of attention and<br>a broad range of interests.</li><li>Chance favours only the prepared mind.</li><li>Curiosity,not to stop questioning.</li><li>observe as objective as possible.</li><li>a good listener,curiosity(desire to know)</li><li>reading to generate ideas.</li><li>keep a notebook</li><li>make and test your assumptions.</li><li>depth mind,subconscious mind.</li><li>know when to turn away from a problem and leave it for a while</li><li>work it out. trying to make or produce something is a way of continuing the process of creative<br>thinking.</li></ul>]]></content>
      
      
      <categories>
          
          <category> book-digest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> creative-thinking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-blog-config</title>
      <link href="/hexo-blog-config/"/>
      <url>/hexo-blog-config/</url>
      
        <content type="html"><![CDATA[<p>After clone blog source code into local,these steps should be done.</p><h2 id="install-nodejs-and-npm"><a href="#install-nodejs-and-npm" class="headerlink" title="install nodejs and npm"></a>install nodejs and npm</h2><p>install archive file,unpack it.</p><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;nodejs.org&#x2F;en&#x2F;download&#x2F;</code></pre><p>add bin path to .bashrc</p><pre class="language-none"><code class="language-none">export PATH&#x3D;&quot;$HOME&#x2F;node-v16.14.2-linux-arm64&#x2F;bin:$PATH&quot;</code></pre><h2 id="install-theme-yun"><a href="#install-theme-yun" class="headerlink" title="install theme -yun"></a>install theme -yun</h2><p>if not,will cause</p><pre class="language-none"><code class="language-none">WARN  No layout: about&#x2F;index.htmlWARN  No layout: tags&#x2F;index.htmlWARN  No layout: categories&#x2F;index.html</code></pre><p><a href="https://hexo-theme-yun.vercel.app/guide/#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B">https://hexo-theme-yun.vercel.app/guide/#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B</a></p><h2 id="generate-and-deploy"><a href="#generate-and-deploy" class="headerlink" title="generate and deploy"></a>generate and deploy</h2><pre class="language-none"><code class="language-none">hexo ghexo d</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-commands</title>
      <link href="/linux-commands/"/>
      <url>/linux-commands/</url>
      
        <content type="html"><![CDATA[<h3 id="scp-copy-file-between-local-and-remote"><a href="#scp-copy-file-between-local-and-remote" class="headerlink" title="scp copy file between local and remote"></a>scp copy file between local and remote</h3><p>copy file from local to a remote</p><p>```</p><h1 id="eg-location2-home-ubuntu"><a href="#eg-location2-home-ubuntu" class="headerlink" title="eg:location2=/home/ubuntu"></a>eg:location2=/home/ubuntu</h1><p>scp test.txt <a href="mailto:ubuntu@192.x.x.x">ubuntu@192.x.x.x</a>:/location2</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>raspberry-pi-wifi-error</title>
      <link href="/raspberry-pi-wifi-error/"/>
      <url>/raspberry-pi-wifi-error/</url>
      
        <content type="html"><![CDATA[<p>On raspberry pi 4b,two reasons cause wifi error.</p><h2 id="usb-3-0-interfere-with-wifi"><a href="#usb-3-0-interfere-with-wifi" class="headerlink" title="usb 3.0 interfere with wifi"></a>usb 3.0 interfere with wifi</h2><p>reproduce:</p><pre class="language-none"><code class="language-none">sudo wpa_supplicant  -i wlan0 -c &#x2F;etc&#x2F;wpa_supplicant&#x2F;wpa_supplicant.confpplicant.conf Successfully initialized wpa_supplicantwlan0: Trying to associate with SSID &#39;SZMIFI&#39;wlan0: CTRL-EVENT-ASSOC-REJECT bssid&#x3D;00:00:00:00:00:00 status_code&#x3D;16wlan0: Trying to associate with SSID &#39;SZMIFI&#39;wlan0: CTRL-EVENT-ASSOC-REJECT bssid&#x3D;00:00:00:00:00:00 status_code&#x3D;16wlan0: Trying to associate with SSID &#39;SZMIFI&#39;wlan0: CTRL-EVENT-ASSOC-REJECT bssid&#x3D;00:00:00:00:00:00 status_code&#x3D;16wlan0: Trying to associate with SSID &#39;SZMIFI&#39;wlan0: CTRL-EVENT-ASSOC-REJECT bssid&#x3D;00:00:00:00:00:00 status_code&#x3D;16wlan0: CTRL-EVENT-SSID-TEMP-DISABLED id&#x3D;0 ssid&#x3D;&quot;SZMIFI&quot; auth_failures&#x3D;1 duration&#x3D;10 reason&#x3D;CONN_FAILEDwlan0: CTRL-EVENT-SSID-REENABLED id&#x3D;0 ssid&#x3D;&quot;SZMIFI&quot;wlan0: Trying to associate with SSID &#39;SZMIFI&#39;wlan0: CTRL-EVENT-ASSOC-REJECT bssid&#x3D;00:00:00:00:00:00 status_code&#x3D;16wlan0: CTRL-EVENT-SSID-TEMP-DISABLED id&#x3D;0 ssid&#x3D;&quot;SZMIFI&quot; auth_failures&#x3D;2 duration&#x3D;20 reason&#x3D;CONN_FAILED^Cnl80211: deinit ifname&#x3D;p2p-dev-wlan0 disabled_11b_rates&#x3D;0p2p-dev-wlan0: CTRL-EVENT-TERMINATING nl80211: deinit ifname&#x3D;wlan0 disabled_11b_rates&#x3D;0</code></pre><p>fix: switch to usb 2.0</p><h2 id="HDMI-is-jamming-its-own-wifi"><a href="#HDMI-is-jamming-its-own-wifi" class="headerlink" title="HDMI is jamming its own wifi"></a>HDMI is jamming its own wifi</h2><p>screen definition higher than 1920*1080 will cause wifi stop working.</p><p>fix:keep screen definition to 1920*1080 and apply,in the Preference-&gt;Screen Configuration</p><h2 id="keyboard-and-mouce-sometimes-dont-respond"><a href="#keyboard-and-mouce-sometimes-dont-respond" class="headerlink" title="keyboard and mouce sometimes dont respond."></a>keyboard and mouce sometimes dont respond.</h2><p>fix: disable hdmi until raspberry pi boot with keyboard and mouce</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://hackaday.com/2019/11/28/raspberry-pi-4-hdmi-is-jamming-its-own-wifi/">https://hackaday.com/2019/11/28/raspberry-pi-4-hdmi-is-jamming-its-own-wifi/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry-pi </tag>
            
            <tag> wifi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-command</title>
      <link href="/docker-command/"/>
      <url>/docker-command/</url>
      
        <content type="html"><![CDATA[<p>difference between image and container<br>We can build or image on local or from docker hub.Then We run container from image,you can run multi-containers from a image with <code>--name=appname</code>.</p><h2 id="install-docker"><a href="#install-docker" class="headerlink" title="install docker"></a>install docker</h2><pre class="language-none"><code class="language-none">curl -fsSL https:&#x2F;&#x2F;get.docker.com -o get-docker.shsudo sh get-docker.sh</code></pre><h2 id="Add-a-Non-Root-User-to-the-Docker-Group"><a href="#Add-a-Non-Root-User-to-the-Docker-Group" class="headerlink" title="Add a Non-Root User to the Docker Group"></a>Add a Non-Root User to the Docker Group</h2><p>this require you are login to non-root user on OS</p><pre class="language-none"><code class="language-none">sudo usermod -aG docker Pi</code></pre><h2 id="remove-docker"><a href="#remove-docker" class="headerlink" title="remove docker"></a>remove docker</h2><pre class="language-none"><code class="language-none">sudo apt-get purge docker-cesudo rm -rf &#x2F;var&#x2F;lib&#x2F;docker</code></pre><h2 id="build-docker-image"><a href="#build-docker-image" class="headerlink" title="build docker image"></a>build docker image</h2><p>image_name:tag</p><pre class="language-none"><code class="language-none">sudo docker build -t ankisyncd:latest .</code></pre><h2 id="container-run-start-stop-remove"><a href="#container-run-start-stop-remove" class="headerlink" title="container run,start,stop,remove"></a>container run,start,stop,remove</h2><h3 id="run-container-in-foreground-add-d-to-run-in-background"><a href="#run-container-in-foreground-add-d-to-run-in-background" class="headerlink" title="run container in foreground (add -d to run in background)"></a>run container in foreground (add -d to run in background)</h3><pre class="language-none"><code class="language-none">sudo docker run -it ankisyncd:latest</code></pre><h3 id="start-and-stop-container"><a href="#start-and-stop-container" class="headerlink" title="start and stop container"></a>start and stop container</h3><pre class="language-none"><code class="language-none">docker container stop container_namedocker container start container_name</code></pre><h3 id="look-up-IP-address-in-a-container"><a href="#look-up-IP-address-in-a-container" class="headerlink" title="look up IP address in a container"></a>look up IP address in a container</h3><p><code>docker ps -a</code> to get container_name</p><pre class="language-none"><code class="language-none">docker inspect container_name | grep Address</code></pre><h3 id="remove-image-and-container"><a href="#remove-image-and-container" class="headerlink" title="remove image and container"></a>remove image and container</h3><p>remove image</p><p>run <code>docker images</code> to get <code>IMAGE ID</code>,<br>then run <code>sudo docker rmi 8458e1ca9dca</code></p><p>remove container</p><p>run <code>docker ps -a</code> to get <code>CONTAINER ID</code>,<br>then run <code>sudo docker rm 97590f6d5deb</code></p><h2 id="Volume-for-persist-data"><a href="#Volume-for-persist-data" class="headerlink" title="Volume for persist data"></a>Volume for persist data</h2><p>add <code>VOLUME /app</code> in Dockerfile</p><p>show Volume</p><pre class="language-none"><code class="language-none">docker volume list</code></pre><p>remove the volume by <code>volume name</code></p><pre class="language-none"><code class="language-none">docker volume rm 962b2d970bcd96de860b348130a84aa86c0aaa55378b3dce35225659679ff808</code></pre><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://phoenixnap.com/kb/docker-on-raspberry-pi">https://phoenixnap.com/kb/docker-on-raspberry-pi</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/git-commonly-used-command/"/>
      <url>/git-commonly-used-command/</url>
      
        <content type="html"><![CDATA[<h3 id="config-user"><a href="#config-user" class="headerlink" title="config user"></a>config user</h3><pre class="language-none"><code class="language-none">git config --global user.name &quot;dobefore&quot;git config --global user.email 1432338032@qq.com</code></pre><h3 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h3><p>create local tag<br><code>git tag 0.1.2</code><br>push tag to remote<br><code>git push origin 0.1.2</code></p><h3 id="fetch-and-checkout-to-other-people’s-pull-request"><a href="#fetch-and-checkout-to-other-people’s-pull-request" class="headerlink" title="fetch and checkout to other people’s pull request"></a>fetch and checkout to other people’s pull request</h3><pre class="language-none"><code class="language-none">#To fetch a remote PR into your local repo,git fetch origin pull&#x2F;PRID&#x2F;head:BRANCHNAMEgit checkout BRANCHNAME</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gen-c-dynamical-library-using-rust-and-call</title>
      <link href="/gen-c-dynamical-library-using-rust/"/>
      <url>/gen-c-dynamical-library-using-rust/</url>
      
        <content type="html"><![CDATA[<h3 id="使用rust生成动态库cdylib"><a href="#使用rust生成动态库cdylib" class="headerlink" title="使用rust生成动态库cdylib"></a>使用rust生成动态库cdylib</h3><h4 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h4><pre class="language-none"><code class="language-none">├── Cargo.lock├── Cargo.toml└── src    └── lib.rs</code></pre><h4 id="Cargo-toml"><a href="#Cargo-toml" class="headerlink" title="Cargo.toml"></a>Cargo.toml</h4><pre class="language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">lib</span><span class="token punctuation">]</span><span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">"rustdll"</span> <span class="token comment">#生成dll的文件名</span><span class="token key property">crate-type</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"cdylib"</span><span class="token punctuation">]</span></code></pre><h4 id="lib-rs"><a href="#lib-rs" class="headerlink" title="lib.rs"></a>lib.rs</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[no_mangle]</span><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function-definition function">gettime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"from rust dll &#123;&#125;"</span><span class="token punctuation">,</span>input<span class="token punctuation">)</span></code></pre><p>build之后，在Windows平台会生成两个文件 <code>rustdll.dll</code>可导入路``rustdll.dll.lib<code> ；而在Linux平台生成文件</code>librustdll.so`</p><h3 id="调用由rust生成的动态库里的函数"><a href="#调用由rust生成的动态库里的函数" class="headerlink" title="调用由rust生成的动态库里的函数"></a>调用由rust生成的动态库里的函数</h3><h4 id="layout-1"><a href="#layout-1" class="headerlink" title="layout"></a>layout</h4><pre class="language-none"><code class="language-none">aa&#x2F;├── Cargo.lock├── Cargo.toml├── build.rs├── lib│   └── librustdll.so└── src    └── main.rs</code></pre><h4 id="LInux"><a href="#LInux" class="headerlink" title="LInux"></a>LInux</h4><p>build.rs</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// indicate dynamical library</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"cargo:rustc-link-lib=dylib=rustdll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// search lib directory,relative path is also ok</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"cargo:rustc-link-search=native=/home/ubuntu/aa/lib"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>src/main.rs</p><pre class="language-rust" data-language="rust"><code class="language-rust">和 build<span class="token punctuation">.</span>rs 中的cargo<span class="token punctuation">:</span>rustc<span class="token operator">-</span>link<span class="token operator">-</span>lib 二选一<span class="token comment">//#[link(name = "rustdll")]</span><span class="token keyword">extern</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">gettime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">&#123;</span>        <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>build command</p><p>if <code>cargo build</code>,可以编译但link error</p><pre class="language-none"><code class="language-none">ldd target&#x2F;debug&#x2F;aa       linux-vdso.so.1 (0x00007ffd5b12d000)       librustdll.so &#x3D;&gt; not found</code></pre><p>add new flags</p><pre class="language-none"><code class="language-none">cargo rustc -- -C link-args&#x3D;&quot;-Wl,-rpath,&#x2F;home&#x2F;ubuntu&#x2F;aa&#x2F;lib&#x2F;&quot;</code></pre><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>src/main.rs</p><pre class="language-rust" data-language="rust"><code class="language-rust">和 build<span class="token punctuation">.</span>rs 中的cargo<span class="token punctuation">:</span>rustc<span class="token operator">-</span>link<span class="token operator">-</span>lib 二选一<span class="token comment">//#[link(name = "rustdll.dll")]</span><span class="token keyword">extern</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">gettime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">&#123;</span>        <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>build.rs</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// search import library .lib</span> <span class="token comment">// indicate dynamical library</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"cargo:rustc-link-lib=dylib=rustdll.dll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// search lib directory,relative path is also ok</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"cargo:rustc-link-search=native=.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>将<code>rustdll.dll</code>和<code>rustdll.dll.lib</code>放在和aa同目录下，执行<code>cargo build</code></p><p>完成后，将可执行文件和动态库文件放在同一文件夹下即可</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://ostack.cn/?qa=621344/">Linking Rust application with a dynamic library not in the runtime linker search path</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> cdylib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>build_ankisyncd</title>
      <link href="/build-ankisyncd/"/>
      <url>/build-ankisyncd/</url>
      
        <content type="html"><![CDATA[<p>disable git verify ssl</p><pre class="language-none"><code class="language-none">export GIT_SSL_NO_VERIFY&#x3D;true</code></pre><h3 id="Configure-gcc"><a href="#Configure-gcc" class="headerlink" title="Configure  gcc"></a>Configure  gcc</h3><h4 id="Install-the-C-cross-toolchain-only-for-armv7"><a href="#Install-the-C-cross-toolchain-only-for-armv7" class="headerlink" title="Install the C cross toolchain(only for armv7)"></a>Install the C cross toolchain(only for armv7)</h4><pre class="language-none"><code class="language-none"># Step 1: Install the C cross toolchain$ sudo apt-get install -qq gcc-arm-linux-gnueabihf</code></pre><h4 id="add-cargo-compiled-standard-crates"><a href="#add-cargo-compiled-standard-crates" class="headerlink" title="add cargo compiled standard crates"></a>add cargo compiled standard crates</h4><pre class="language-none"><code class="language-none">#for aarch54rustup target add aarch64-unknown-linux-musl# for aarch32&#x2F;armv7rustup target add armv7-unknown-linux-musleabihf#for darwin macosrustup target add x86_64-apple-darwin</code></pre><h4 id="download-cross-compile-toolchains-and-set-ENV-var"><a href="#download-cross-compile-toolchains-and-set-ENV-var" class="headerlink" title="download cross-compile toolchains and set ENV var"></a>download cross-compile toolchains and set ENV var</h4><ol><li>aarch64/x86_64</li></ol><p>enter site <a href="https://link.zhihu.com/?target=https://musl.cc/">https://musl.cc/</a>  to get musl-gcc and decompression</p><p>export bin (x86_64-linux-musl-native seems not able to build ,so use cross version)</p><pre class="language-none"><code class="language-none">export PATH&#x3D;&quot;$HOME&#x2F;aarch64-linux-musl-cross&#x2F;bin:$PATH&quot;export PATH&#x3D;&quot;$HOME&#x2F;x86_64-linux-musl-cross&#x2F;bin:$PATH&quot;source ~&#x2F;.profile</code></pre><ol start="2"><li><p>armv7</p><pre class="language-none"><code class="language-none">git clone --depth 1 https:&#x2F;&#x2F;github.com&#x2F;raspberrypi&#x2F;tools.git rpitools</code></pre><p>export bin</p><pre class="language-none"><code class="language-none">export PATH&#x3D;&quot;$HOME&#x2F;rpitools&#x2F;arm-bcm2708&#x2F;arm-rpi-4.9.3-linux-gnueabihf&#x2F;bin:$PATH&quot;</code></pre></li><li><p>macos</p><pre class="language-none"><code class="language-none"># Install build dependenciessudo apt install \    clang \    gcc \    g++ \    zlib1g-dev \    libmpc-dev \    libmpfr-dev \    libgmp-dev \    libxml2-dev</code></pre></li></ol><p>Add the following to a script called osxcross_setup.sh and make it executable.</p><pre class="language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;tpoechtrager&#x2F;osxcrosscd osxcrosswget -nc https:&#x2F;&#x2F;s3.dockerproject.org&#x2F;darwin&#x2F;v2&#x2F;MacOSX10.10.sdk.tar.xzmv MacOSX10.10.sdk.tar.xz tarballs&#x2F;UNATTENDED&#x3D;yes OSX_VERSION_MIN&#x3D;10.7 .&#x2F;build.sh</code></pre><p>run sh</p><pre class="language-none"><code class="language-none">.&#x2F;osxcross_setup.sh</code></pre><p>Add to PATH ENV</p><pre class="language-none"><code class="language-none">export PATH&#x3D;&quot;&#x2F;home&#x2F;ubuntu&#x2F;osxcross&#x2F;target&#x2F;bin:$PATH&quot;</code></pre><h4 id="Configure-Cargo"><a href="#Configure-Cargo" class="headerlink" title="Configure Cargo"></a>Configure Cargo</h4><p>   cat ~/.cargo/config</p>   <pre class="language-none"><code class="language-none">   [target.x86_64-apple-darwin]linker &#x3D; &quot;x86_64-apple-darwin14-clang&quot;ar &#x3D; &quot;x86_64-apple-darwin14-ar&quot;   [target.aarch64-unknown-linux-musl]   linker &#x3D; &quot;aarch64-linux-musl-gcc&quot;   rustflags &#x3D; [&quot;-C&quot;, &quot;target-feature&#x3D;+crt-static&quot;, &quot;-C&quot;, &quot;link-arg&#x3D;-lgcc&quot;]      [target.armv7-unknown-linux-musleabihf]   linker &#x3D; &quot;arm-linux-musleabihf-gcc&quot;   rustflags  &#x3D; [       &quot;-C&quot;, &quot;target-feature&#x3D;+crt-static&quot;,       &quot;-C&quot;, &quot;link-args&#x3D;-static&quot;,   ]      [target.x86_64-unknown-linux-musl]   linker &#x3D; &quot;x86_64-linux-musl-gcc&quot;   rustflags &#x3D; [&quot;-C&quot;, &quot;target-feature&#x3D;+crt-static&quot;, &quot;-C&quot;, &quot;link-args&#x3D;-static&quot;,]      [net]   retry &#x3D; 2 # 失败 自动重试 次数   git-fetch-with-cli &#x3D; true</code></pre><h3 id="Cross-compile-openssl"><a href="#Cross-compile-openssl" class="headerlink" title="Cross-compile openssl"></a>Cross-compile openssl</h3><h4 id="cross-compile"><a href="#cross-compile" class="headerlink" title="cross-compile"></a>cross-compile</h4><pre class="language-none"><code class="language-none">wget https:&#x2F;&#x2F;www.openssl.org&#x2F;source&#x2F;openssl-1.0.1t.tar.gztar -zxvf openssl-OpenSSL_1_1_1fcd ..# for aarch64export MACHINE&#x3D;aarch64export ARCH&#x3D;armexport CC&#x3D;aarch64-linux-musl-gcc# for x86_64export MACHINE&#x3D;x86_64export ARCH&#x3D;x86_64export CC&#x3D;x86_64-linux-musl-gcc#aarch32&#x2F;armv7export MACHINE&#x3D;armv7export ARCH&#x3D;arm# in rpitoolsexport CC&#x3D;arm-linux-gnueabihf-gcccd openssl-OpenSSL_1_1_1f# add --prefix&#x3D;dir to apoint dir will be make install.&#x2F;config shared &amp;&amp; makecd ..# dont know if its true.fisrt time will build failed.change add OPENSSL_LIB_DIR # with lib,then build,this will fail and last change back and build export OPENSSL_LIB_DIR&#x3D;&#x2F;home&#x2F;ubuntu&#x2F;openssl-1.0.1t&#x2F;export OPENSSL_INCLUDE_DIR&#x3D;&#x2F;home&#x2F;ubuntu&#x2F;openssl-1.0.1t&#x2F;includeexport OPENSSL_STATIC&#x3D;true</code></pre><h4 id="cross-compile-libsqlite3"><a href="#cross-compile-libsqlite3" class="headerlink" title="cross compile libsqlite3"></a>cross compile libsqlite3</h4><p>this step isnt necessary during build ankisyncd,do in build<br>everydaytask.</p><pre class="language-none"><code class="language-none">export CC&#x3D;aarch64-linux-musl-gcc .&#x2F;configure --host&#x3D;aarch64 --prefix&#x3D;&#x2F;home&#x2F;ubuntu&#x2F;sqlmake &amp; make install  export SQLITE3_LIB_DIR&#x3D;$HOME&#x2F;sql&#x2F;bin&#x2F; export SQLITE3_INCLUDE_DIR&#x3D;$HOME&#x2F;sql&#x2F;include&#x2F;</code></pre><h3 id="build-ankisyncd"><a href="#build-ankisyncd" class="headerlink" title="build ankisyncd"></a>build ankisyncd</h3><p>at last ,build</p><pre class="language-none"><code class="language-none"># aarch64cargo build --target&#x3D;aarch64-unknown-linux-musl --release#aarch32&#x2F;armv7 cargo build --target armv7-unknown-linux-musleabihf --release#linux x86_64cargo build --release --target&#x3D;x86_64-unknown-linux-musl# MacOS x86_64CC&#x3D;o64-clang \CXX&#x3D;o64-clang++ \SQLITE3_SYS_STATIC&#x3D;1 \OPENSSL_SYS_STATIC&#x3D;1 \cargo build --target x86_64-apple-darwin</code></pre><p>package and compression</p><pre class="language-none"><code class="language-none">tar -czvf ankisyncd_linux_armv7.tar.gz ankisyncd ankisyncctl</code></pre><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://jiapeng.me/helium-gateway-rs-compile/">cross compile for armv7</a></li><li><a href="https://github.com/japaric/rust-cross">rust cross github</a></li><li><a href="https://www.cnblogs.com/sevenyuan/p/13663372.html">交叉编译rust-openssl crate for armv7</a></li><li><a href="https://qiita.com/liubin/items/6c94f0b61f746c08b74c">How to build openssl-sys crate for musl in Rust</a></li><li><a href="https://www.jianshu.com/p/7d599bdf370a">git错误error: server certificate verification failed. CAfile:</a></li><li><a href="https://rustwiki.org/zh-CN/edition-guide/rust-2018/platform-and-target-support/musl-support-for-fully-static-binaries.html">MUSL 支持完全静态二进制文件</a></li><li><a href="https://doc.rust-lang.org/cargo/reference/config.html">git-fetch-with-cli</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> cross-compile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust-fatal-error-link1201</title>
      <link href="/rust-fatal-error-link1201/"/>
      <url>/rust-fatal-error-link1201/</url>
      
        <content type="html"><![CDATA[<p>on occationally,当我run <code>cargo build</code> using building tool msvc,error appears as follows:</p><pre class="language-none"><code class="language-none">note: LINK : fatal error LNK1201: error writing to program database&#39;D:\software\vscode_project\anki_sync\anki-sync-server-rs\target\debug\build\futures-channel-29fccd2a64763c5c\build_script_build-29fccd2a64763c5c.pdb&#39;; check for insufficient diskspace, invalid path, or insufficient privilege</code></pre><p>after search the Internet,I find the solution. You can delete the file error info refers to,that is,in this situation,<code>D:\software\vscode_project\anki_sync\anki-sync-server-rs\target\debug\build\futures-channel-29fccd2a64763c5c\build_script_build-29fccd2a64763c5c.pdb</code>. Or you just can delete folder /target ,problems  solved.</p><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><ul><li><a href="https://stackoverflow.com/questions/35662865/fatal-error-lnk1201-error-writing-to-program-database-visual-studio-2003">fatal error LNK1201: error writing to program database - Visual Studio 2003</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> program language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sciter-rs控件中文显示乱码</title>
      <link href="/rust-sciter-utf8-support/"/>
      <url>/rust-sciter-utf8-support/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>在用Rust运行sciter app 时，控件文字包含中文会出现乱码的问题。</p><h1 id="How-to-Fix"><a href="#How-to-Fix" class="headerlink" title="How to Fix"></a>How to Fix</h1><ol><li>如果在html页面里面，在 <code>&lt;head&gt;</code>标签里加上<code>meta</code> 标签注明字符集<code>utf-8</code>。</li></ol><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><p>如果是以BOM开始的utf8资源.</p><pre class="language-none"><code class="language-none">first three bytes: EF BB BF). #不是太明白</code></pre><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1></li></ol><ul><li><a href="https://sciter.com/forums/topic/sciterloadhtml-and-utf-8/">sciterloadhtml-and-utf-8</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> program language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> gui </tag>
            
            <tag> sciter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust中的文本断行（newline）</title>
      <link href="/newline-differ-in-Windows-and-Linux/"/>
      <url>/newline-differ-in-Windows-and-Linux/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>在Windows平台用Rust编程，有时候需要写入batch（.bat）文件，但是却不能正确地执行。</p><p>下面是一个发送应用的快捷方式到桌面的batch。</p><span id="more"></span><pre class="language-basic" data-language="basic"><code class="language-basic">@echo <span class="token keyword">off</span><span class="token punctuation">:</span><span class="token punctuation">:</span>设置程序或文件的完整路径（必选）<span class="token function">set</span> <span class="token function">Program</span><span class="token operator">=</span>C<span class="token punctuation">:</span>\Users\Admin\Desktop\anki_server.exe<span class="token punctuation">:</span><span class="token punctuation">:</span>设置快捷方式名称（必选）<span class="token function">set</span> LnkName<span class="token operator">=</span>anki_server<span class="token punctuation">:</span><span class="token punctuation">:</span>设置程序的工作路径，一般为程序主目录，此项若留空，脚本将自行分析路径<span class="token function">set</span> WorkDir<span class="token operator">=</span><span class="token punctuation">:</span><span class="token punctuation">:</span>设置快捷方式显示的说明（可选）<span class="token function">set</span> Desc<span class="token operator">=</span>测试<span class="token keyword">if</span> <span class="token operator">not</span> defined WorkDir <span class="token keyword">call</span><span class="token punctuation">:</span>GetWorkDir <span class="token string">"%Program%"</span><span class="token punctuation">(</span>echo <span class="token function">Set</span> WshShell<span class="token operator">=</span>CreateObject<span class="token punctuation">(</span><span class="token string">"WScript.Shell"</span><span class="token operator">^</span><span class="token punctuation">)</span>echo strDesKtop<span class="token operator">=</span>WshShell.SpecialFolders<span class="token punctuation">(</span><span class="token string">"DesKtop"</span><span class="token operator">^</span><span class="token punctuation">)</span>echo <span class="token function">Set</span> oShellLink<span class="token operator">=</span>WshShell.CreateShortcut<span class="token punctuation">(</span>strDesKtop<span class="token operator">^</span><span class="token operator">&amp;</span>"\%LnkName%.lnk"<span class="token operator">^</span><span class="token punctuation">)</span>echo oShellLink.TargetPath<span class="token operator">=</span><span class="token string">"%Program%"</span>echo oShellLink.WorkingDirectory<span class="token operator">=</span><span class="token string">"%WorkDir%"</span>echo oShellLink.WindowStyle<span class="token operator">=</span><span class="token number">1</span>echo oShellLink.Description<span class="token operator">=</span><span class="token string">"%Desc%"</span>echo oShellLink.Save<span class="token punctuation">)</span><span class="token operator">></span>makelnk.vbsecho created shelllnk OKmakelnk.vbsdel <span class="token operator">/</span>f <span class="token operator">/</span>q makelnk.vbs<span class="token keyword">exit</span><span class="token keyword">goto</span> <span class="token punctuation">:</span>eof<span class="token punctuation">:</span>GetWorkDir<span class="token function">set</span> WorkDir<span class="token operator">=</span>%~dp1<span class="token function">set</span> WorkDir<span class="token operator">=</span>%WorkDir<span class="token punctuation">:</span>~<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span>%<span class="token keyword">goto</span> <span class="token punctuation">:</span>eof</code></pre><p>执行后得到，’柟寮忓悕绉帮紙蹇呴€夛級’ 不是内部或外部命令，也不是可运行的程序或批处理文件。</p><h2 id="Rust写文件默认的newline"><a href="#Rust写文件默认的newline" class="headerlink" title="Rust写文件默认的newline"></a>Rust写文件默认的newline</h2><h3 id="Windows中的体现"><a href="#Windows中的体现" class="headerlink" title="Windows中的体现"></a>Windows中的体现</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token string">"f.txt"</span><span class="token punctuation">;</span><span class="token comment">// </span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> <span class="token class-name">OpenOptions</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token macro property">writeln!</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token macro property">writeln!</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行后，用记事本<code>f.txt</code>打开，显示如下：</p><p><img src="https://z3.ax1x.com/2021/06/09/2cGvLD.png" alt="Linux_newline" loading="lazy">](<a href="https://imgtu.com/i/2cGvLD">https://imgtu.com/i/2cGvLD</a>)</p><p>结果看出是Unix风格的newline “”\n”，再看下Rust writeln!的文档说明：</p><blockquote><p>On all platforms, the newline is the LINE FEED character (<code>\n</code>/<code>U+000A</code>) alone (no additional CARRIAGE RETURN (<code>\r</code>/<code>U+000D</code>).</p></blockquote><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>Rust中为我们提供了macro  write!()，并没有newline。我们自己提供newline风格CRLE（\r\n）。</p><pre class="language-none"><code class="language-none">write!(file, &quot;&#123;&#125;\r\n&quot;,&quot;c&quot;).unwrap();</code></pre>]]></content>
      
      
      <categories>
          
          <category> program language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无职转生～在异世界认真地活下去小说下载</title>
      <link href="/wzzs/"/>
      <url>/wzzs/</url>
      
        <content type="html"><![CDATA[<p>从qianbixiaoshuo上获取的<strong>无职转生～在异世界认真地活下去</strong>小说1-24卷提供百度网盘下载，txt和mobi(无目录) </p><span id="more"></span><p>网盘链接：<a href="https://pan.baidu.com/s/1fC61scDXaAXayJko60uj3Q">点此跳转网盘</a></p><p>提取码：2020</p>]]></content>
      
      
      <categories>
          
          <category> book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> resource </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows搭建基于https协议的Anki局域网同步服务器</title>
      <link href="/set_up_anki_custom_server_on_https_protocol/"/>
      <url>/set_up_anki_custom_server_on_https_protocol/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>配置满足的条件</strong>有：</p><ul><li>Windows Anki版本2.1（版本：帮助–&gt;关于）</li><li>安卓平台 Ankidroid 版本 &gt;=2.8</li><li>同步时局域网（手机热点，WIFI）内和在电脑旁</li><li>IOS anki （ipad，iphone等）不能同步。</li></ul><p><strong>首先运行</strong>引导配置程序，请双击<strong>deployer.exe。</strong></p><h2 id="一、检查Anki版本"><a href="#一、检查Anki版本" class="headerlink" title="一、检查Anki版本"></a>一、检查Anki版本</h2><p>安装上面所说的版本。</p><p>点击下一步。。。</p><p><a href="https://imgtu.com/i/bTGMlD"><img src="https://s1.ax1x.com/2022/03/12/bTGMlD.png" alt="bTGMlD.png" loading="lazy"></a></p><h2 id="二、设置Anki同步地址"><a href="#二、设置Anki同步地址" class="headerlink" title="二、设置Anki同步地址"></a>二、设置Anki同步地址</h2><h4 id="（1）添加根证书到受信任的系统证书区"><a href="#（1）添加根证书到受信任的系统证书区" class="headerlink" title="（1）添加根证书到受信任的系统证书区"></a>（1）添加根证书到受信任的系统证书区</h4><p>有如下弹窗请点击是。</p><p><a href="https://imgtu.com/i/bT8bQg"><img src="https://s1.ax1x.com/2022/03/12/bT8bQg.png" alt="bT8bQg.png" loading="lazy"></a></p><h4 id="（2）设置手机Anki同步地址"><a href="#（2）设置手机Anki同步地址" class="headerlink" title="（2）设置手机Anki同步地址"></a>（2）设置手机Anki同步地址</h4><p>1.在桌面找到<code>rootCA.crt</code> ，用QQ、USB、微信等发送文件到手机，并在手机中找到它，触摸弹出证书安装界面。仅安装一次，后续部署过程中无需此操作。</p><p><a href="https://imgtu.com/i/bTGKSO"><img src="https://s1.ax1x.com/2022/03/12/bTGKSO.png" alt="bTGKSO.png" loading="lazy"></a></p><p>2.手机开启在定义同步服务器，进入 设置-&gt;高级设置-&gt;自定义同步服务器（点击后勾选）</p><p>3.填写引导程序界面的同步地址和媒体文件同步地址，点击开关进入下一步。。。</p><p><a href="https://imgtu.com/i/jC122d"><img src="https://s1.ax1x.com/2022/06/23/jC122d.png" alt="jC122d.png" loading="lazy"></a></p><h2 id="三、将服务器端启动程序发送到桌面快捷方式，并添加到开始菜单"><a href="#三、将服务器端启动程序发送到桌面快捷方式，并添加到开始菜单" class="headerlink" title="三、将服务器端启动程序发送到桌面快捷方式，并添加到开始菜单"></a>三、将服务器端启动程序发送到桌面快捷方式，并添加到开始菜单</h2><p><a href="https://imgtu.com/i/bTGeFx"><img src="https://s1.ax1x.com/2022/03/12/bTGeFx.png" alt="bTGeFx.png" loading="lazy"></a></p><p>添加到开始菜单意味着可以通过开始搜索框快捷启动软件</p><p>然后就在桌面看到了上面的图标，点击下一步。。。</p><h2 id="四、新建账号-账号管理"><a href="#四、新建账号-账号管理" class="headerlink" title="四、新建账号/账号管理"></a>四、新建账号/账号管理</h2><p>选择 添加账号 ，再点击 提交选择，会出现输入框，输入简单的用户名和密码 ，点击 提交，即添加成功，点击下一步。。。</p><p><a href="https://imgtu.com/i/bT8jwn"><img src="https://s1.ax1x.com/2022/03/12/bT8jwn.png" alt="bT8jwn.png" loading="lazy"></a></p><h2 id="五、打开同步服务、Anki切换配置方案-填写账号"><a href="#五、打开同步服务、Anki切换配置方案-填写账号" class="headerlink" title="五、打开同步服务、Anki切换配置方案,填写账号"></a>五、打开同步服务、Anki切换配置方案,填写账号</h2><p>1.在桌面找到第五步发送的快捷方式Anki_server，双击后会出现黑色窗口（同步过程中保持运行），可最小化运行。如果采用DHCP动态分配IP的设备（比如校园网），请下翻至问答区Q2.</p><p><a href="https://imgtu.com/i/bTGmY6"><img src="https://s1.ax1x.com/2022/03/12/bTGmY6.png" alt="bTGmY6.png" loading="lazy"></a></p><p>2.打开电脑 Anki，建议 到<strong>文件–&gt;切换配置方案–&gt;添加</strong>新的配置方案并进入（如果有牌组，先导出），点击同步，输入刚刚创建的账号密码，成功后再导入牌组。</p><p><strong>百度网盘链接:</strong></p><p>**Windows Anki **，<a href="https://apps.ankiweb.net/">Anki官网下载</a>，<a href="https://github.com/ankitects/anki/releases">PC 历史版本</a></p><p><strong>Ankidroid</strong>：<a href="https://pan.baidu.com/s/1_sEx8PXrraQuXlsfx_Y3EA">百度网盘链接（提取码：2020）</a>，<a href="https://f-droid.org/packages/com.ichi2.anki/">F-droid市场下载</a>，<a href="https://github.com/ankidroid/Anki-Android/releases">gtihub下载</a></p><p><strong>服务器端软件</strong>（提取码：2021）：<a href="https://pan.baidu.com/s/1NMGVGzJ2nm6wmWSZDNn5iQ">点这里</a></p><p><strong>阿里云盘链接：</strong></p><p><strong>服务器端软件</strong><a href="https://www.aliyundrive.com/s/inbib8Fkx21">点这里</a></p><p><strong>问答区：</strong></p><p><strong>Q1：配置并打开服务器后，电脑端anki能够同步，手机端却不行？</strong></p><p>A：1.手机端anki IP是否配置正确，比如https去掉s 2.手机和电脑是否在同一局域网下 3.电脑开启了防火墙，把防火墙关掉。</p><p><strong>Q2:某天打开服务端软件开始同步，发现突然出现错误，明明账号和密码都对，以前都可以同步？</strong></p><p>可能设备采用DHCP动态分配IP,说明服务端所在的电脑被分配的IP已经发生变动；每次服务端软件anki_server(ankisyncd)启动会检测本机ip是否发生变化，如果发生变动，会自动修改电脑Anki的IP，并将详细的新地址打印到服务端黑色窗口，需要你手动填写到安卓Ankidroid的相应界面。<br><a href="https://imgtu.com/i/bTGnfK"><img src="https://s1.ax1x.com/2022/03/12/bTGnfK.png" alt="bTGnfK.png" loading="lazy"></a></p><p><strong>参考文章：</strong></p><p><a href="https://blog.dteam.top/posts/2019-04/%E6%9C%AC%E5%9C%B0https%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88mkcert.html">本地https快速解决方案——mkcert</a></p><p><a href="https://github.com/ankicommunity/anki-sync-server-rs">ankicommunity/anki-sync-server-rs</a></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
            <tag> 搭建Anki服务器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
