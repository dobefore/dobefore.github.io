<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在rust程序中调用c函数</title>
      <link href="/call-c-from-rust/"/>
      <url>/call-c-from-rust/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>我想写一段rust程序，它能够接收到用户键盘输入就会立刻退出，即按任意键退出，但是不用用户敲击<code>enter</code>键。纯用rust写似乎不好实现，而利用现成的c语言却能很好地解决问题。</p><p>我们用c语言实现上面的功能，并在rust程序中调用c函数，我们把c静态编译成静态库，静态链接。</p><h2 id="代码实现细节"><a href="#代码实现细节" class="headerlink" title="代码实现细节"></a>代码实现细节</h2><p>我们使用构建库<code>cc</code>来编译c程序为静态库，利用rust构建脚本来搜索查找静态库。我们在main模块里面引入c库函数。</p><p>新建一个项目 <code>cargo new callc</code>.下面是各个文件的内容构成。</p><blockquote><p>src/press.c</p></blockquote><p>c代码解释：<code>getch</code>函数从标准输入流读取一个字符，而不需要用户输入enter键，因为直接从键盘Buffer里面读取。一旦字符被读取，程序会退出。<br>注意<code>conio.h</code> 可能不是标准库函数，在除Windows以外的操作系统中可能会出现失败的情形。</p><pre class="language-none"><code class="language-none">#include &lt;stdio.h&gt;#include &lt;conio.h&gt;int press() &#123;    printf(&quot;Press any key to exit...\n&quot;);    getch();    return 0;&#125;</code></pre><blockquote><p>Cargo.toml</p></blockquote><pre class="language-none"><code class="language-none">build&#x3D;&quot;build.rs&quot;[build-dependencies]cc &#x3D; &quot;1.0.78&quot;</code></pre><blockquote><p>src/main.rs</p></blockquote><p>声明我们要使用函数<code>press</code></p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; Note the lack of the &#96;#[link]&#96; attribute. We’re delegating the responsibility&#x2F;&#x2F; of selecting what to link over to the build script rather than hard-coding&#x2F;&#x2F; it in the source file.extern &#123; fn press(); &#125;fn main() &#123;    unsafe &#123; press(); &#125;&#125;</code></pre><blockquote><p>build.rs</p></blockquote><p>编译<code>press.c</code>为静态库，紧接着在位置<code>OUT_DIR</code>环境变量所指示的目录下面找到静态库便于后面的链接。</p><pre class="language-none"><code class="language-none">use std::env;fn main() &#123;    &#x2F;&#x2F; out dir is in target&#x2F;release&#x2F;build     let out_dir &#x3D; env::var(&quot;OUT_DIR&quot;).unwrap();    &#x2F;&#x2F; Tell Cargo that if the given file changes, to rerun this build script.    println!(&quot;cargo:rerun-if-changed&#x3D;src&#x2F;press.c&quot;);    &#x2F;&#x2F; Use the &#96;cc&#96; crate to build a C file and statically link it.    cc::Build::new()        .file(&quot;src&#x2F;press.c&quot;)        .compile(&quot;press&quot;);            println!(&quot;cargo:rustc-link-search&#x3D;native&#x3D;&#123;&#125;&quot;, out_dir);    println!(&quot;cargo:rustc-link-lib&#x3D;static&#x3D;press&quot;);&#125;</code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a class="link"   href="https://doc.rust-lang.org/cargo/reference/build-script-examples.html" >https://doc.rust-lang.org/cargo/reference/build-script-examples.html<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>set_up_anki_custom_server_new</title>
      <link href="/set-up-anki-custom-server-new/"/>
      <url>/set-up-anki-custom-server-new/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在文章<a href="https://dobefore.github.io/set_up_anki_custom_server_on_https_protocol/">set_up_anki_custom_server_on_https_protocol</a>里面提供了Ankidroid几乎全版本（&gt;2.8）的支持，但是由于部署软件兼容性并不能正常滴在所有Windows机型上运行。所以这篇文章介绍更广兼容性的方法，需要安装我们文件夹中提供的Ankidroid版本（当然也可以等待2.16正式版的发布），关于为什么会有版本要求看这里<a href="#ankidroid%E7%89%88%E6%9C%AC%E8%A6%81%E6%B1%82%E5%8E%9F%E5%9B%A0%E4%B8%8E%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9">ankidroid版本要求原因与版本选择</a>。</p><p>接下来是一份相当简单的引导教程，可以找个合适的位置存放下载好的文件夹用来<strong>存放同步数据</strong>。</p><h2 id="第一步-打开配置文件ankisyncd-toml，设置你的同步账号和密码"><a href="#第一步-打开配置文件ankisyncd-toml，设置你的同步账号和密码" class="headerlink" title="第一步  打开配置文件ankisyncd.toml，设置你的同步账号和密码"></a>第一步  打开配置文件ankisyncd.toml，设置你的同步账号和密码</h2><p>如果跳过这一步的话，会得到账号username:<code>test</code>,password:<code>123456</code>。如下图，账号可以随意填写，输入后记得保存。<br><a href="https://imgse.com/i/v4GRLq"><img src="https://s1.ax1x.com/2022/08/31/v4GRLq.png" alt="v4GRLq.png"></a></p><h2 id="第二步-双击启动ankiserver，查看同步地址（用于Ankidroid的配置）"><a href="#第二步-双击启动ankiserver，查看同步地址（用于Ankidroid的配置）" class="headerlink" title="第二步 双击启动ankiserver，查看同步地址（用于Ankidroid的配置）"></a>第二步 双击启动ankiserver，查看同步地址（用于Ankidroid的配置）</h2><p><a href="https://imgse.com/i/xvcWQO"><img src="https://s1.ax1x.com/2022/11/07/xvcWQO.png" alt="xvcWQO.png"></a></p><h2 id="第三步-打开Anki，输入账号-来自第一步-，点击同步"><a href="#第三步-打开Anki，输入账号-来自第一步-，点击同步" class="headerlink" title="第三步 打开Anki，输入账号(来自第一步)，点击同步"></a>第三步 打开Anki，输入账号(来自第一步)，点击同步</h2><p>保持第二步服务端处于开启状态（黑屏打开状态），到<strong>工具（tools）–&gt;首选项(preferences)–&gt;网络（network）–&gt;退出账号(logout)</strong>,然后退出Anki再打开，输入第一步的账号。<br><a href="https://imgse.com/i/v4gcLV"><img src="https://s1.ax1x.com/2022/08/31/v4gcLV.png" alt="v4gcLV.png"></a></p><h2 id="第四步-安卓手机，连接到电脑相同的局域网"><a href="#第四步-安卓手机，连接到电脑相同的局域网" class="headerlink" title="第四步 安卓手机，连接到电脑相同的局域网"></a>第四步 安卓手机，连接到电脑相同的局域网</h2><p><del>设置 -&gt; 高级设置 -&gt; 自定义同步服务器</del>（此为老版配置地址,请使用文件夹内的安装包或者等待正式版<code>2.16</code>的发布，以此进入<strong>设置–&gt;同步–&gt;自定义同步服务器</strong>，设置同步地址和媒体文件同步地址。<br><a href="https://imgse.com/i/xvy5cD"><img src="https://s1.ax1x.com/2022/11/07/xvy5cD.jpg" alt="xvy5cD.jpg"></a></p><h2 id="一些额外话"><a href="#一些额外话" class="headerlink" title="一些额外话"></a>一些额外话</h2><p>为便于后续服务器软件打开，你可以将软件发送到开始菜单和桌面，这样你将能够通过开始菜单搜索找到我们的应用，<br>操作方法也很简单，在我们文件夹找到<code>send.exe</code>,双击它，允许管理员运行。<br><a href="https://imgse.com/i/v4GqyR"><img src="https://s1.ax1x.com/2022/08/31/v4GqyR.png" alt="v4GqyR.png"></a></p><p><a href="https://imgse.com/i/v4Gbl9"><img src="https://s1.ax1x.com/2022/08/31/v4Gbl9.png" alt="v4Gbl9.png"></a></p><h3 id="Ankidroid版本要求原因与版本选择"><a href="#Ankidroid版本要求原因与版本选择" class="headerlink" title="Ankidroid版本要求原因与版本选择"></a>Ankidroid版本要求原因与版本选择</h3><p>因为安卓安全性相关策略，较新的安卓系统会要求APP HTTPS连接，AnkiDroid 2.10-2.15.6都是基于这样设计的，在新版本2.16(目前为测试版)允许HTTP不安全连接，同样也降低了我们部署的难度和繁琐程度。</p><p>工具源来自 <a class="link"   href="https://github.com/ankicommunity/anki-sync-server-rs" >anki-sync-server-rs<i class="fas fa-external-link-alt"></i></a>以及<a class="link"   href="https://github.com/dobefore/anki-server-deploy" >anki-server-deploy<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Anki </tag>
            
            <tag> 搭建Anki服务器 </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>island_economy</title>
      <link href="/island-economy/"/>
      <url>/island-economy/</url>
      
        <content type="html"><![CDATA[<p>from : How an Economy Grows and Why It Crashes&lt;&lt;小岛经济学&gt;&gt;,Peter D. Schiff  Andrew J. Schiff<br>前提：islander will eat 1 fish per day .</p><h2 id="About-employee-and-employer"><a href="#About-employee-and-employer" class="headerlink" title="About employee and employer"></a>About employee and employer</h2><p>A worker is free to : </p><ol><li>underconsume to build a net(capital ).</li><li>take out a business loan to nuy a net.</li><li>work for someone who already has a net.</li></ol><p><strong>fish transport</strong>:Finnigan,a strong man,can deliver 100 fish per day,at a 2% freight fee,he earned 2 fish per day. Murray,having taken out a business loan to build a fish cart,he can deliver 300 fish per day,at a 1% rate,he earned 3 fish per day. assuming Finnigan can deliver 400 fish with a cart,as Finnigan can generate 4 fish in income at a 1% rate,Murray offer him 3 fish as employee.</p><p><strong>about paper money</strong>: people love getting stuff for free ,they hate paying taxes .if he could find a way to make it look like he was giving something to the islanders for free ,How could they give away more than they took ?<br>After storm destroy,many of our citizens are hutless and fishless,politician say ‘I will institute a government reconstruction program for our neediest citizens to repair the damage.’</p><p>But, there were not enough fish reserves to finance the spending plans.The government would issue paper money called Fish Reserve Notes,fish:note 1:1.To get support ,government hand out notes to fund .<br>Soon,more notes than the government ‘s account in bank had fish to redeem(兑换？), use official fish (generate new fish from discarded fish parts) to pay back depositors.fish:note 9:10 (10 official fish from 9 genuine fish)</p><p>government establish a fishing department.To guarantee people ,create a new agency insurance corporation with Senate behind their deposits.</p><p>then official  fish:real fish  -&gt; 5:4 -&gt; 3:2 -&gt; 2:1 .now most ate 2 per day ,at minimum .prices for every thing had to go up to keep pace with the diminished nutritional value of fish. ‘fishflatten’ was born and discoraged savings , unemployment high.There is no fish in the bank.</p><p>One island,Sinopia,catch fish by hand,no savings,bank,credit,business,offered to exchange fish for fish reserve notes.The transactions were a huge boom to Usonia,ie boost local economy ,deposits of fish swell .fishflation disappear .</p><p>Sinopia can build factory ,sold these goods to Usonians for fish reserve notes.</p><p>Reality check:Many of these dollars held by foreigners are typically deposited in American banks, where they can be borrowed by Americans. That way we can spend even if we don’t save.<br>Usonia work transfer to “service sector” and less capital intense ,e.g. chefs,story teller .</p><h2 id="About-export"><a href="#About-export" class="headerlink" title="About export"></a>About export</h2><p><strong>trade surplus</strong>  :the country exported much more than it import(sells more aboard than it ).trade deficit is the reverse . A country with trade surplus will create a international demand for its currency .Strong trading positions tend to strengthen a country ‘s currency .BUt when a country ‘s currency rises,its products become more expensive . “a global currency war “–depress currency . In addition,a cheap currency simultaneousLy makes imports morexpensive.</p><p>One island leader withdraw much more fish from bank , causing Usonia fishflation.Usonia leaders close the bank ‘s fish window to foreign deposits. This causes value of Notes to drop,but it finally stablize.Although the gap between Senate spending and what it raised in taxes widens,<br>the notes that are used to pay for fresh fish from foreign sources are exported and never are redeemed for fish .</p><h2 id="about-hut-loan-market"><a href="#about-hut-loan-market" class="headerlink" title="about hut loan market"></a>about hut loan market</h2>]]></content>
      
      
      
        <tags>
            
            <tag> economy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>raspberry pico观察日记</title>
      <link href="/rpi-pico-diary/"/>
      <url>/rpi-pico-diary/</url>
      
        <content type="html"><![CDATA[<p>每次按住<code>bootsel</code>接入pc usb时，会擦除pico原来的程序（.uf2）;下载firmware到pico,第二次只是插入usb供电，不会擦除程序。</p><p>requirements (Installation of development dependencies):</p><ul><li>Toolchain support for the cortex-m0+ processors in the rp2040 (<code>thumbv6m-none-eabi</code>)<pre class="language-none"><code class="language-none">rustup target install thumbv6m-none-eabicargo install flip-link# This is our suggested default &#39;runner&#39;cargo install probe-run# If you want to use elf2uf2-rs instead of probe-run, instead do...cargo install elf2uf2-rs --locked</code></pre></li></ul><p>run with <code>elf2uf2</code> (Loading a UF2 over USB)<br>Make sure your .cargo/config contains the following</p><pre class="language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">target.thumbv6m-none-eabi</span><span class="token punctuation">]</span><span class="token key property">runner</span> <span class="token punctuation">=</span> <span class="token string">"elf2uf2-rs -d"</span></code></pre><p>connect pico to pc by pushing <code>bootsel</code> ,and then run <code>cargo run</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry-pico </tag>
            
            <tag> embeded </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust-with-correct-SQL</title>
      <link href="/rust-with-correct-SQL/"/>
      <url>/rust-with-correct-SQL/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> sqlite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>common-vim-commands</title>
      <link href="/common-vim-commands/"/>
      <url>/common-vim-commands/</url>
      
        <content type="html"><![CDATA[<pre class="language-none"><code class="language-none">行移动：$:  将光标移动到当前行的行尾0:  将光标移动到当前行的行首在屏幕中移动:gg:  移动到文件开头M:  移动到屏幕中间L:  移动到一屏末尾字符删除:x:  删除当前光标所在处的字符X:  删除当前光标左边的字符行删除:dd:  删除当前光标处的一整行&#x3D;D文本复制、剪切与粘贴:y:  复制，p:粘贴yy:  复制一整行撤销修改、重做与保存:u:  撤销上一步的操作。文本的查找与替换:&#x2F;string   正向查找?string   反向查找设置高亮显示    :set hls    *按键将当前光标处的单词高亮显示，使用n浏览下一个查找高亮的结果:wq save and exit</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>termux-settings</title>
      <link href="/termux-settings/"/>
      <url>/termux-settings/</url>
      
        <content type="html"><![CDATA[<h2 id="获取手机存储访问权限"><a href="#获取手机存储访问权限" class="headerlink" title="获取手机存储访问权限"></a>获取手机存储访问权限</h2><pre class="language-none"><code class="language-none">termux-setup-storage</code></pre><h2 id="set-user-account-for-termux"><a href="#set-user-account-for-termux" class="headerlink" title="set user account for termux"></a>set user account for termux</h2><pre class="language-none"><code class="language-none">whoami#set new passpasswd</code></pre><h2 id="install-and-set-ssh"><a href="#install-and-set-ssh" class="headerlink" title="install and set ssh"></a>install and set ssh</h2><p>start sshd</p><pre class="language-none"><code class="language-none">apt install opensshsshd -p8022</code></pre><p>delete old host key in file <code>known_hosts</code> from client<br>e.g. <code>C:\Users\Admin\.ssh\known_hosts</code></p><h2 id="set-on-my-zsh"><a href="#set-on-my-zsh" class="headerlink" title="set on-my-zsh"></a>set on-my-zsh</h2><pre class="language-none"><code class="language-none">apt install curl zsh gitsh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;gitee.com&#x2F;sherkeyxd&#x2F;termux-ohmyzsh&#x2F;raw&#x2F;master&#x2F;install.sh)&quot;</code></pre><p>add plugin <code>autosuggestions</code></p><pre class="language-none"><code class="language-none"># 拷贝到 plugins 目录下(or use alternative repo from gitee)git clone git:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions $ZSH_CUSTOM&#x2F;plugins&#x2F;zsh-autosuggestions</code></pre><p>在 ~/.zshrc 中配置：</p><pre class="language-none"><code class="language-none">plugins&#x3D;(其他的插件 zsh-autosuggestions)</code></pre><h2 id="install-linux-distribution"><a href="#install-linux-distribution" class="headerlink" title="install linux distribution"></a>install linux distribution</h2><pre class="language-none"><code class="language-none">pkg install proot-distroproot-distro listproot-distro install ubuntu# or save command to a scriptproot-distro login ubuntu</code></pre><h2 id="settings-in-linux-distribution"><a href="#settings-in-linux-distribution" class="headerlink" title="settings in linux distribution"></a>settings in linux distribution</h2><h3 id="install-ssh"><a href="#install-ssh" class="headerlink" title="install ssh"></a>install ssh</h3><pre class="language-none"><code class="language-none">apt updateapt install openssh-server</code></pre><p>modify sshd_config</p><pre class="language-none"><code class="language-none">vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</code></pre><p>把Port 22改为 9022，注意不能是22，也不能是8022<br>把PermitRootLogin那一行，注释去掉，改为PermiRootLogin yes</p><p>start sshd</p><pre class="language-none"><code class="language-none">&#x2F;etc&#x2F;init.d&#x2F;ssh stop&#x2F;etc&#x2F;init.d&#x2F;ssh start</code></pre><p>check status of sshd</p><pre class="language-none"><code class="language-none">&#x2F;etc&#x2F;init.d&#x2F;ssh status</code></pre><p>get username <code>whoami</code><br>最终还是失败不是ssh的问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> termux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-blog-config</title>
      <link href="/hexo-blog-config/"/>
      <url>/hexo-blog-config/</url>
      
        <content type="html"><![CDATA[<p>After clone blog source code into local,these steps should be done.</p><h2 id="install-nodejs-and-npm"><a href="#install-nodejs-and-npm" class="headerlink" title="install nodejs and npm"></a>install nodejs and npm</h2><p>install archive file,unpack it.</p><pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;nodejs.org&#x2F;en&#x2F;download&#x2F;</code></pre><p>add bin path to .bashrc</p><pre class="language-none"><code class="language-none">export PATH&#x3D;&quot;$HOME&#x2F;node-v16.14.2-linux-arm64&#x2F;bin:$PATH&quot;</code></pre><h2 id="install-theme-yun"><a href="#install-theme-yun" class="headerlink" title="install theme -yun"></a>install theme -yun</h2><p>if not,will cause</p><pre class="language-none"><code class="language-none">WARN  No layout: about&#x2F;index.htmlWARN  No layout: tags&#x2F;index.htmlWARN  No layout: categories&#x2F;index.html</code></pre><p><a class="link"   href="https://hexo-theme-yun.vercel.app/guide/#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B" >https://hexo-theme-yun.vercel.app/guide/#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B<i class="fas fa-external-link-alt"></i></a></p><h2 id="generate-and-deploy"><a href="#generate-and-deploy" class="headerlink" title="generate and deploy"></a>generate and deploy</h2><pre class="language-none"><code class="language-none">hexo ghexo d</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-commands</title>
      <link href="/linux-commands/"/>
      <url>/linux-commands/</url>
      
        <content type="html"><![CDATA[<h3 id="scp-copy-file-between-local-and-remote"><a href="#scp-copy-file-between-local-and-remote" class="headerlink" title="scp copy file between local and remote"></a>scp copy file between local and remote</h3><p>copy file from local to a remote</p><p>```</p><h1 id="eg-location2-home-ubuntu"><a href="#eg-location2-home-ubuntu" class="headerlink" title="eg:location2=/home/ubuntu"></a>eg:location2=/home/ubuntu</h1><p>scp test.txt <a class="link"   href="mailto:ubuntu@192.x.x.x" >ubuntu@192.x.x.x<i class="fas fa-external-link-alt"></i></a>:/location2</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>raspberry-pi-wifi-error</title>
      <link href="/raspberry-pi-wifi-error/"/>
      <url>/raspberry-pi-wifi-error/</url>
      
        <content type="html"><![CDATA[<p>On raspberry pi 4b,two reasons cause wifi error.</p><h2 id="usb-3-0-interfere-with-wifi"><a href="#usb-3-0-interfere-with-wifi" class="headerlink" title="usb 3.0 interfere with wifi"></a>usb 3.0 interfere with wifi</h2><p>reproduce:</p><pre class="language-none"><code class="language-none">sudo wpa_supplicant  -i wlan0 -c &#x2F;etc&#x2F;wpa_supplicant&#x2F;wpa_supplicant.confpplicant.conf Successfully initialized wpa_supplicantwlan0: Trying to associate with SSID &#39;SZMIFI&#39;wlan0: CTRL-EVENT-ASSOC-REJECT bssid&#x3D;00:00:00:00:00:00 status_code&#x3D;16wlan0: Trying to associate with SSID &#39;SZMIFI&#39;wlan0: CTRL-EVENT-ASSOC-REJECT bssid&#x3D;00:00:00:00:00:00 status_code&#x3D;16wlan0: Trying to associate with SSID &#39;SZMIFI&#39;wlan0: CTRL-EVENT-ASSOC-REJECT bssid&#x3D;00:00:00:00:00:00 status_code&#x3D;16wlan0: Trying to associate with SSID &#39;SZMIFI&#39;wlan0: CTRL-EVENT-ASSOC-REJECT bssid&#x3D;00:00:00:00:00:00 status_code&#x3D;16wlan0: CTRL-EVENT-SSID-TEMP-DISABLED id&#x3D;0 ssid&#x3D;&quot;SZMIFI&quot; auth_failures&#x3D;1 duration&#x3D;10 reason&#x3D;CONN_FAILEDwlan0: CTRL-EVENT-SSID-REENABLED id&#x3D;0 ssid&#x3D;&quot;SZMIFI&quot;wlan0: Trying to associate with SSID &#39;SZMIFI&#39;wlan0: CTRL-EVENT-ASSOC-REJECT bssid&#x3D;00:00:00:00:00:00 status_code&#x3D;16wlan0: CTRL-EVENT-SSID-TEMP-DISABLED id&#x3D;0 ssid&#x3D;&quot;SZMIFI&quot; auth_failures&#x3D;2 duration&#x3D;20 reason&#x3D;CONN_FAILED^Cnl80211: deinit ifname&#x3D;p2p-dev-wlan0 disabled_11b_rates&#x3D;0p2p-dev-wlan0: CTRL-EVENT-TERMINATING nl80211: deinit ifname&#x3D;wlan0 disabled_11b_rates&#x3D;0</code></pre><p>fix: switch to usb 2.0</p><h2 id="HDMI-is-jamming-its-own-wifi"><a href="#HDMI-is-jamming-its-own-wifi" class="headerlink" title="HDMI is jamming its own wifi"></a>HDMI is jamming its own wifi</h2><p>screen definition higher than 1920*1080 will cause wifi stop working.</p><p>fix:keep screen definition to 1920*1080 and apply,in the Preference-&gt;Screen Configuration</p><h2 id="keyboard-and-mouce-sometimes-dont-respond"><a href="#keyboard-and-mouce-sometimes-dont-respond" class="headerlink" title="keyboard and mouce sometimes dont respond."></a>keyboard and mouce sometimes dont respond.</h2><p>fix: disable hdmi until raspberry pi boot with keyboard and mouce</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a class="link"   href="https://hackaday.com/2019/11/28/raspberry-pi-4-hdmi-is-jamming-its-own-wifi/" >https://hackaday.com/2019/11/28/raspberry-pi-4-hdmi-is-jamming-its-own-wifi/<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> raspberry-pi </tag>
            
            <tag> wifi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-command</title>
      <link href="/docker-command/"/>
      <url>/docker-command/</url>
      
        <content type="html"><![CDATA[<p>difference between image and container<br>We can build or image on local or from docker hub.Then We run container from image,you can run multi-containers from a image with <code>--name=appname</code>.</p><h2 id="install-docker"><a href="#install-docker" class="headerlink" title="install docker"></a>install docker</h2><pre class="language-none"><code class="language-none">curl -fsSL https:&#x2F;&#x2F;get.docker.com -o get-docker.shsudo sh get-docker.sh</code></pre><h2 id="Add-a-Non-Root-User-to-the-Docker-Group"><a href="#Add-a-Non-Root-User-to-the-Docker-Group" class="headerlink" title="Add a Non-Root User to the Docker Group"></a>Add a Non-Root User to the Docker Group</h2><p>this require you are login to non-root user on OS</p><pre class="language-none"><code class="language-none">sudo usermod -aG docker Pi</code></pre><h2 id="remove-docker"><a href="#remove-docker" class="headerlink" title="remove docker"></a>remove docker</h2><pre class="language-none"><code class="language-none">sudo apt-get purge docker-cesudo rm -rf &#x2F;var&#x2F;lib&#x2F;docker</code></pre><h2 id="build-docker-image"><a href="#build-docker-image" class="headerlink" title="build docker image"></a>build docker image</h2><p>image_name:tag</p><pre class="language-none"><code class="language-none">sudo docker build -t ankisyncd:latest .</code></pre><h2 id="container-run-start-stop-remove"><a href="#container-run-start-stop-remove" class="headerlink" title="container run,start,stop,remove"></a>container run,start,stop,remove</h2><h3 id="run-container-in-foreground-add-d-to-run-in-background"><a href="#run-container-in-foreground-add-d-to-run-in-background" class="headerlink" title="run container in foreground (add -d to run in background)"></a>run container in foreground (add -d to run in background)</h3><pre class="language-none"><code class="language-none">sudo docker run -it ankisyncd:latest</code></pre><h3 id="start-and-stop-container"><a href="#start-and-stop-container" class="headerlink" title="start and stop container"></a>start and stop container</h3><pre class="language-none"><code class="language-none">docker container stop container_namedocker container start container_name</code></pre><h3 id="look-up-IP-address-in-a-container"><a href="#look-up-IP-address-in-a-container" class="headerlink" title="look up IP address in a container"></a>look up IP address in a container</h3><p><code>docker ps -a</code> to get container_name</p><pre class="language-none"><code class="language-none">docker inspect container_name | grep Address</code></pre><h3 id="remove-image-and-container"><a href="#remove-image-and-container" class="headerlink" title="remove image and container"></a>remove image and container</h3><p>remove image</p><p>run <code>docker images</code> to get <code>IMAGE ID</code>,<br>then run <code>sudo docker rmi 8458e1ca9dca</code></p><p>remove container</p><p>run <code>docker ps -a</code> to get <code>CONTAINER ID</code>,<br>then run <code>sudo docker rm 97590f6d5deb</code></p><h2 id="Volume-for-persist-data"><a href="#Volume-for-persist-data" class="headerlink" title="Volume for persist data"></a>Volume for persist data</h2><p>add <code>VOLUME /app</code> in Dockerfile</p><p>show Volume</p><pre class="language-none"><code class="language-none">docker volume list</code></pre><p>remove the volume by <code>volume name</code></p><pre class="language-none"><code class="language-none">docker volume rm 962b2d970bcd96de860b348130a84aa86c0aaa55378b3dce35225659679ff808</code></pre><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a class="link"   href="https://phoenixnap.com/kb/docker-on-raspberry-pi" >https://phoenixnap.com/kb/docker-on-raspberry-pi<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/git-commonly-used-command/"/>
      <url>/git-commonly-used-command/</url>
      
        <content type="html"><![CDATA[<h3 id="config-user"><a href="#config-user" class="headerlink" title="config user"></a>config user</h3><pre class="language-none"><code class="language-none">git config --global user.name &quot;dobefore&quot;git config --global user.email 1432338032@qq.com</code></pre><h3 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h3><p>create local tag<br><code>git tag 0.1.2</code><br>push tag to remote<br><code>git push origin 0.1.2</code></p><h3 id="fetch-and-checkout-to-other-people’s-pull-request"><a href="#fetch-and-checkout-to-other-people’s-pull-request" class="headerlink" title="fetch and checkout to other people’s pull request"></a>fetch and checkout to other people’s pull request</h3><pre class="language-none"><code class="language-none">#To fetch a remote PR into your local repo,git fetch origin pull&#x2F;PRID&#x2F;head:BRANCHNAMEgit checkout BRANCHNAME</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gen-c-dynamical-library-using-rust-and-call</title>
      <link href="/gen-c-dynamical-library-using-rust/"/>
      <url>/gen-c-dynamical-library-using-rust/</url>
      
        <content type="html"><![CDATA[<h3 id="使用rust生成动态库cdylib"><a href="#使用rust生成动态库cdylib" class="headerlink" title="使用rust生成动态库cdylib"></a>使用rust生成动态库cdylib</h3><h4 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h4><pre class="language-none"><code class="language-none">├── Cargo.lock├── Cargo.toml└── src    └── lib.rs</code></pre><h4 id="Cargo-toml"><a href="#Cargo-toml" class="headerlink" title="Cargo.toml"></a>Cargo.toml</h4><pre class="language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">lib</span><span class="token punctuation">]</span><span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">"rustdll"</span> <span class="token comment">#生成dll的文件名</span><span class="token key property">crate-type</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"cdylib"</span><span class="token punctuation">]</span></code></pre><h4 id="lib-rs"><a href="#lib-rs" class="headerlink" title="lib.rs"></a>lib.rs</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[no_mangle]</span><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function-definition function">gettime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"from rust dll &#123;&#125;"</span><span class="token punctuation">,</span>input<span class="token punctuation">)</span></code></pre><p>build之后，在Windows平台会生成两个文件 <code>rustdll.dll</code>可导入路``rustdll.dll.lib<code> ；而在Linux平台生成文件</code>librustdll.so`</p><h3 id="调用由rust生成的动态库里的函数"><a href="#调用由rust生成的动态库里的函数" class="headerlink" title="调用由rust生成的动态库里的函数"></a>调用由rust生成的动态库里的函数</h3><h4 id="layout-1"><a href="#layout-1" class="headerlink" title="layout"></a>layout</h4><pre class="language-none"><code class="language-none">aa&#x2F;├── Cargo.lock├── Cargo.toml├── build.rs├── lib│   └── librustdll.so└── src    └── main.rs</code></pre><h4 id="LInux"><a href="#LInux" class="headerlink" title="LInux"></a>LInux</h4><p>build.rs</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// indicate dynamical library</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"cargo:rustc-link-lib=dylib=rustdll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// search lib directory,relative path is also ok</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"cargo:rustc-link-search=native=/home/ubuntu/aa/lib"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>src/main.rs</p><pre class="language-rust" data-language="rust"><code class="language-rust">和 build<span class="token punctuation">.</span>rs 中的cargo<span class="token punctuation">:</span>rustc<span class="token operator">-</span>link<span class="token operator">-</span>lib 二选一<span class="token comment">//#[link(name = "rustdll")]</span><span class="token keyword">extern</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">gettime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">&#123;</span>        <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>build command</p><p>if <code>cargo build</code>,可以编译但link error</p><pre class="language-none"><code class="language-none">ldd target&#x2F;debug&#x2F;aa       linux-vdso.so.1 (0x00007ffd5b12d000)       librustdll.so &#x3D;&gt; not found</code></pre><p>add new flags</p><pre class="language-none"><code class="language-none">cargo rustc -- -C link-args&#x3D;&quot;-Wl,-rpath,&#x2F;home&#x2F;ubuntu&#x2F;aa&#x2F;lib&#x2F;&quot;</code></pre><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>src/main.rs</p><pre class="language-rust" data-language="rust"><code class="language-rust">和 build<span class="token punctuation">.</span>rs 中的cargo<span class="token punctuation">:</span>rustc<span class="token operator">-</span>link<span class="token operator">-</span>lib 二选一<span class="token comment">//#[link(name = "rustdll.dll")]</span><span class="token keyword">extern</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">gettime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">&#123;</span>        <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>build.rs</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// search import library .lib</span> <span class="token comment">// indicate dynamical library</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"cargo:rustc-link-lib=dylib=rustdll.dll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// search lib directory,relative path is also ok</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"cargo:rustc-link-search=native=.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>将<code>rustdll.dll</code>和<code>rustdll.dll.lib</code>放在和aa同目录下，执行<code>cargo build</code></p><p>完成后，将可执行文件和动态库文件放在同一文件夹下即可</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a class="link"   href="http://ostack.cn/?qa=621344/" >Linking Rust application with a dynamic library not in the runtime linker search path<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> cdylib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>build_ankisyncd</title>
      <link href="/build-ankisyncd/"/>
      <url>/build-ankisyncd/</url>
      
        <content type="html"><![CDATA[<p>disable git verify ssl</p><pre class="language-none"><code class="language-none">export GIT_SSL_NO_VERIFY&#x3D;true</code></pre><h3 id="Configure-gcc"><a href="#Configure-gcc" class="headerlink" title="Configure  gcc"></a>Configure  gcc</h3><h4 id="Install-the-C-cross-toolchain-only-for-armv7"><a href="#Install-the-C-cross-toolchain-only-for-armv7" class="headerlink" title="Install the C cross toolchain(only for armv7)"></a>Install the C cross toolchain(only for armv7)</h4><pre class="language-none"><code class="language-none"># Step 1: Install the C cross toolchain$ sudo apt-get install -qq gcc-arm-linux-gnueabihf</code></pre><h4 id="add-cargo-compiled-standard-crates"><a href="#add-cargo-compiled-standard-crates" class="headerlink" title="add cargo compiled standard crates"></a>add cargo compiled standard crates</h4><pre class="language-none"><code class="language-none">#for aarch54rustup target add aarch64-unknown-linux-musl# for aarch32&#x2F;armv7rustup target add armv7-unknown-linux-musleabihf#for darwin macosrustup target add x86_64-apple-darwin</code></pre><h4 id="download-cross-compile-toolchains-and-set-ENV-var"><a href="#download-cross-compile-toolchains-and-set-ENV-var" class="headerlink" title="download cross-compile toolchains and set ENV var"></a>download cross-compile toolchains and set ENV var</h4><ol><li>aarch64/x86_64</li></ol><p>enter site <a class="link"   href="https://link.zhihu.com/?target=https://musl.cc/" >https://musl.cc/<i class="fas fa-external-link-alt"></i></a>  to get musl-gcc and decompression</p><p>export bin (x86_64-linux-musl-native seems not able to build ,so use cross version)</p><pre class="language-none"><code class="language-none">export PATH&#x3D;&quot;$HOME&#x2F;aarch64-linux-musl-cross&#x2F;bin:$PATH&quot;export PATH&#x3D;&quot;$HOME&#x2F;x86_64-linux-musl-cross&#x2F;bin:$PATH&quot;source ~&#x2F;.profile</code></pre><ol start="2"><li><p>armv7</p><pre class="language-none"><code class="language-none">git clone --depth 1 https:&#x2F;&#x2F;github.com&#x2F;raspberrypi&#x2F;tools.git rpitools</code></pre><p>export bin</p><pre class="language-none"><code class="language-none">export PATH&#x3D;&quot;$HOME&#x2F;rpitools&#x2F;arm-bcm2708&#x2F;arm-rpi-4.9.3-linux-gnueabihf&#x2F;bin:$PATH&quot;</code></pre></li><li><p>macos</p><pre class="language-none"><code class="language-none"># Install build dependenciessudo apt install \    clang \    gcc \    g++ \    zlib1g-dev \    libmpc-dev \    libmpfr-dev \    libgmp-dev \    libxml2-dev</code></pre></li></ol><p>Add the following to a script called osxcross_setup.sh and make it executable.</p><pre class="language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;tpoechtrager&#x2F;osxcrosscd osxcrosswget -nc https:&#x2F;&#x2F;s3.dockerproject.org&#x2F;darwin&#x2F;v2&#x2F;MacOSX10.10.sdk.tar.xzmv MacOSX10.10.sdk.tar.xz tarballs&#x2F;UNATTENDED&#x3D;yes OSX_VERSION_MIN&#x3D;10.7 .&#x2F;build.sh</code></pre><p>run sh</p><pre class="language-none"><code class="language-none">.&#x2F;osxcross_setup.sh</code></pre><p>Add to PATH ENV</p><pre class="language-none"><code class="language-none">export PATH&#x3D;&quot;&#x2F;home&#x2F;ubuntu&#x2F;osxcross&#x2F;target&#x2F;bin:$PATH&quot;</code></pre><h4 id="Configure-Cargo"><a href="#Configure-Cargo" class="headerlink" title="Configure Cargo"></a>Configure Cargo</h4><p>   cat ~/.cargo/config</p>   <pre class="language-none"><code class="language-none">   [target.x86_64-apple-darwin]linker &#x3D; &quot;x86_64-apple-darwin14-clang&quot;ar &#x3D; &quot;x86_64-apple-darwin14-ar&quot;   [target.aarch64-unknown-linux-musl]   linker &#x3D; &quot;aarch64-linux-musl-gcc&quot;   rustflags &#x3D; [&quot;-C&quot;, &quot;target-feature&#x3D;+crt-static&quot;, &quot;-C&quot;, &quot;link-arg&#x3D;-lgcc&quot;]      [target.armv7-unknown-linux-musleabihf]   linker &#x3D; &quot;arm-linux-musleabihf-gcc&quot;   rustflags  &#x3D; [       &quot;-C&quot;, &quot;target-feature&#x3D;+crt-static&quot;,       &quot;-C&quot;, &quot;link-args&#x3D;-static&quot;,   ]      [target.x86_64-unknown-linux-musl]   linker &#x3D; &quot;x86_64-linux-musl-gcc&quot;   rustflags &#x3D; [&quot;-C&quot;, &quot;target-feature&#x3D;+crt-static&quot;, &quot;-C&quot;, &quot;link-args&#x3D;-static&quot;,]      [net]   retry &#x3D; 2 # 失败 自动重试 次数   git-fetch-with-cli &#x3D; true</code></pre><h3 id="Cross-compile-openssl"><a href="#Cross-compile-openssl" class="headerlink" title="Cross-compile openssl"></a>Cross-compile openssl</h3><h4 id="cross-compile"><a href="#cross-compile" class="headerlink" title="cross-compile"></a>cross-compile</h4><pre class="language-none"><code class="language-none">wget https:&#x2F;&#x2F;www.openssl.org&#x2F;source&#x2F;openssl-1.0.1t.tar.gztar -zxvf openssl-OpenSSL_1_1_1fcd ..# for aarch64export MACHINE&#x3D;aarch64export ARCH&#x3D;armexport CC&#x3D;aarch64-linux-musl-gcc# for x86_64export MACHINE&#x3D;x86_64export ARCH&#x3D;x86_64export CC&#x3D;x86_64-linux-musl-gcc#aarch32&#x2F;armv7export MACHINE&#x3D;armv7export ARCH&#x3D;arm# in rpitoolsexport CC&#x3D;arm-linux-gnueabihf-gcccd openssl-OpenSSL_1_1_1f# add --prefix&#x3D;dir to apoint dir will be make install.&#x2F;config shared &amp;&amp; makecd ..# dont know if its true.fisrt time will build failed.change add OPENSSL_LIB_DIR # with lib,then build,this will fail and last change back and build export OPENSSL_LIB_DIR&#x3D;&#x2F;home&#x2F;ubuntu&#x2F;openssl-1.0.1t&#x2F;export OPENSSL_INCLUDE_DIR&#x3D;&#x2F;home&#x2F;ubuntu&#x2F;openssl-1.0.1t&#x2F;includeexport OPENSSL_STATIC&#x3D;true</code></pre><h4 id="cross-compile-libsqlite3"><a href="#cross-compile-libsqlite3" class="headerlink" title="cross compile libsqlite3"></a>cross compile libsqlite3</h4><p>this step isnt necessary during build ankisyncd,do in build<br>everydaytask.</p><pre class="language-none"><code class="language-none">export CC&#x3D;aarch64-linux-musl-gcc .&#x2F;configure --host&#x3D;aarch64 --prefix&#x3D;&#x2F;home&#x2F;ubuntu&#x2F;sqlmake &amp; make install  export SQLITE3_LIB_DIR&#x3D;$HOME&#x2F;sql&#x2F;bin&#x2F; export SQLITE3_INCLUDE_DIR&#x3D;$HOME&#x2F;sql&#x2F;include&#x2F;</code></pre><h3 id="build-ankisyncd"><a href="#build-ankisyncd" class="headerlink" title="build ankisyncd"></a>build ankisyncd</h3><p>at last ,build</p><pre class="language-none"><code class="language-none"># aarch64cargo build --target&#x3D;aarch64-unknown-linux-musl --release#aarch32&#x2F;armv7 cargo build --target armv7-unknown-linux-musleabihf --release#linux x86_64cargo build --release --target&#x3D;x86_64-unknown-linux-musl# MacOS x86_64CC&#x3D;o64-clang \CXX&#x3D;o64-clang++ \SQLITE3_SYS_STATIC&#x3D;1 \OPENSSL_SYS_STATIC&#x3D;1 \cargo build --target x86_64-apple-darwin</code></pre><p>package and compression</p><pre class="language-none"><code class="language-none">tar -czvf ankisyncd_linux_armv7.tar.gz ankisyncd ankisyncctl</code></pre><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a class="link"   href="https://jiapeng.me/helium-gateway-rs-compile/" >cross compile for armv7<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://github.com/japaric/rust-cross" >rust cross github<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.cnblogs.com/sevenyuan/p/13663372.html" >交叉编译rust-openssl crate for armv7<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://qiita.com/liubin/items/6c94f0b61f746c08b74c" >How to build openssl-sys crate for musl in Rust<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://www.jianshu.com/p/7d599bdf370a" >git错误error: server certificate verification failed. CAfile:<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://rustwiki.org/zh-CN/edition-guide/rust-2018/platform-and-target-support/musl-support-for-fully-static-binaries.html" >MUSL 支持完全静态二进制文件<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://doc.rust-lang.org/cargo/reference/config.html" >git-fetch-with-cli<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> cross-compile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust-fatal-error-link1201</title>
      <link href="/rust-fatal-error-link1201/"/>
      <url>/rust-fatal-error-link1201/</url>
      
        <content type="html"><![CDATA[<p>on occationally,当我run <code>cargo build</code> using building tool msvc,error appears as follows:</p><pre class="language-none"><code class="language-none">note: LINK : fatal error LNK1201: error writing to program database&#39;D:\software\vscode_project\anki_sync\anki-sync-server-rs\target\debug\build\futures-channel-29fccd2a64763c5c\build_script_build-29fccd2a64763c5c.pdb&#39;; check for insufficient diskspace, invalid path, or insufficient privilege</code></pre><p>after search the Internet,I find the solution. You can delete the file error info refers to,that is,in this situation,<code>D:\software\vscode_project\anki_sync\anki-sync-server-rs\target\debug\build\futures-channel-29fccd2a64763c5c\build_script_build-29fccd2a64763c5c.pdb</code>. Or you just can delete folder /target ,problems  solved.</p><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><ul><li><a class="link"   href="https://stackoverflow.com/questions/35662865/fatal-error-lnk1201-error-writing-to-program-database-visual-studio-2003" >fatal error LNK1201: error writing to program database - Visual Studio 2003<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
      
      
      <categories>
          
          <category> program language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sciter-rs控件中文显示乱码</title>
      <link href="/rust-sciter-utf8-support/"/>
      <url>/rust-sciter-utf8-support/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>在用Rust运行sciter app 时，控件文字包含中文会出现乱码的问题。</p><h1 id="How-to-Fix"><a href="#How-to-Fix" class="headerlink" title="How to Fix"></a>How to Fix</h1><ol><li>如果在html页面里面，在 <code>&lt;head&gt;</code>标签里加上<code>meta</code> 标签注明字符集<code>utf-8</code>。</li></ol><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><p>如果是以BOM开始的utf8资源.</p><pre class="language-none"><code class="language-none">first three bytes: EF BB BF). #不是太明白</code></pre><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1></li></ol><ul><li><a class="link"   href="https://sciter.com/forums/topic/sciterloadhtml-and-utf-8/" >sciterloadhtml-and-utf-8<i class="fas fa-external-link-alt"></i></a></li></ul>]]></content>
      
      
      <categories>
          
          <category> program language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> gui </tag>
            
            <tag> sciter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust中的文本断行（newline）</title>
      <link href="/newline-differ-in-Windows-and-Linux/"/>
      <url>/newline-differ-in-Windows-and-Linux/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>在Windows平台用Rust编程，有时候需要写入batch（.bat）文件，但是却不能正确地执行。</p><p>下面是一个发送应用的快捷方式到桌面的batch。</p><span id="more"></span><pre class="language-basic" data-language="basic"><code class="language-basic">@echo <span class="token keyword">off</span><span class="token punctuation">:</span><span class="token punctuation">:</span>设置程序或文件的完整路径（必选）<span class="token function">set</span> <span class="token function">Program</span><span class="token operator">=</span>C<span class="token punctuation">:</span>\Users\Admin\Desktop\anki_server.exe<span class="token punctuation">:</span><span class="token punctuation">:</span>设置快捷方式名称（必选）<span class="token function">set</span> LnkName<span class="token operator">=</span>anki_server<span class="token punctuation">:</span><span class="token punctuation">:</span>设置程序的工作路径，一般为程序主目录，此项若留空，脚本将自行分析路径<span class="token function">set</span> WorkDir<span class="token operator">=</span><span class="token punctuation">:</span><span class="token punctuation">:</span>设置快捷方式显示的说明（可选）<span class="token function">set</span> Desc<span class="token operator">=</span>测试<span class="token keyword">if</span> <span class="token operator">not</span> defined WorkDir <span class="token keyword">call</span><span class="token punctuation">:</span>GetWorkDir <span class="token string">"%Program%"</span><span class="token punctuation">(</span>echo <span class="token function">Set</span> WshShell<span class="token operator">=</span>CreateObject<span class="token punctuation">(</span><span class="token string">"WScript.Shell"</span><span class="token operator">^</span><span class="token punctuation">)</span>echo strDesKtop<span class="token operator">=</span>WshShell.SpecialFolders<span class="token punctuation">(</span><span class="token string">"DesKtop"</span><span class="token operator">^</span><span class="token punctuation">)</span>echo <span class="token function">Set</span> oShellLink<span class="token operator">=</span>WshShell.CreateShortcut<span class="token punctuation">(</span>strDesKtop<span class="token operator">^</span><span class="token operator">&amp;</span>"\%LnkName%.lnk"<span class="token operator">^</span><span class="token punctuation">)</span>echo oShellLink.TargetPath<span class="token operator">=</span><span class="token string">"%Program%"</span>echo oShellLink.WorkingDirectory<span class="token operator">=</span><span class="token string">"%WorkDir%"</span>echo oShellLink.WindowStyle<span class="token operator">=</span><span class="token number">1</span>echo oShellLink.Description<span class="token operator">=</span><span class="token string">"%Desc%"</span>echo oShellLink.Save<span class="token punctuation">)</span><span class="token operator">></span>makelnk.vbsecho created shelllnk OKmakelnk.vbsdel <span class="token operator">/</span>f <span class="token operator">/</span>q makelnk.vbs<span class="token keyword">exit</span><span class="token keyword">goto</span> <span class="token punctuation">:</span>eof<span class="token punctuation">:</span>GetWorkDir<span class="token function">set</span> WorkDir<span class="token operator">=</span>%~dp1<span class="token function">set</span> WorkDir<span class="token operator">=</span>%WorkDir<span class="token punctuation">:</span>~<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span>%<span class="token keyword">goto</span> <span class="token punctuation">:</span>eof</code></pre><p>执行后得到，’柟寮忓悕绉帮紙蹇呴€夛級’ 不是内部或外部命令，也不是可运行的程序或批处理文件。</p><h2 id="Rust写文件默认的newline"><a href="#Rust写文件默认的newline" class="headerlink" title="Rust写文件默认的newline"></a>Rust写文件默认的newline</h2><h3 id="Windows中的体现"><a href="#Windows中的体现" class="headerlink" title="Windows中的体现"></a>Windows中的体现</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token string">"f.txt"</span><span class="token punctuation">;</span><span class="token comment">// </span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> <span class="token class-name">OpenOptions</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token macro property">writeln!</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token macro property">writeln!</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行后，用记事本<code>f.txt</code>打开，显示如下：</p><p><img src="https://z3.ax1x.com/2021/06/09/2cGvLD.png" alt="Linux_newline">](<a class="link"   href="https://imgtu.com/i/2cGvLD" >https://imgtu.com/i/2cGvLD<i class="fas fa-external-link-alt"></i></a>)</p><p>结果看出是Unix风格的newline “”\n”，再看下Rust writeln!的文档说明：</p><blockquote><p>On all platforms, the newline is the LINE FEED character (<code>\n</code>/<code>U+000A</code>) alone (no additional CARRIAGE RETURN (<code>\r</code>/<code>U+000D</code>).</p></blockquote><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>Rust中为我们提供了macro  write!()，并没有newline。我们自己提供newline风格CRLE（\r\n）。</p><pre class="language-none"><code class="language-none">write!(file, &quot;&#123;&#125;\r\n&quot;,&quot;c&quot;).unwrap();</code></pre>]]></content>
      
      
      <categories>
          
          <category> program language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无职转生～在异世界认真地活下去小说下载</title>
      <link href="/wzzs/"/>
      <url>/wzzs/</url>
      
        <content type="html"><![CDATA[<p>从qianbixiaoshuo上获取的<strong>无职转生～在异世界认真地活下去</strong>小说1-24卷提供百度网盘下载，txt和mobi(无目录) </p><span id="more"></span><p>网盘链接：<a class="link"   href="https://pan.baidu.com/s/1fC61scDXaAXayJko60uj3Q" >点此跳转网盘<i class="fas fa-external-link-alt"></i></a></p><p>提取码：2020</p>]]></content>
      
      
      <categories>
          
          <category> book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> resource </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows搭建基于https协议的Anki局域网同步服务器</title>
      <link href="/set_up_anki_custom_server_on_https_protocol/"/>
      <url>/set_up_anki_custom_server_on_https_protocol/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>配置满足的条件</strong>有：</p><ul><li>Windows Anki版本2.1（版本：帮助–&gt;关于）</li><li>安卓平台 Ankidroid 版本 &gt;=2.8</li><li>同步时局域网（手机热点，WIFI）内和在电脑旁</li><li>IOS anki （ipad，iphone等）不能同步。</li></ul><p><strong>首先运行</strong>引导配置程序，请双击<strong>deployer.exe。</strong></p><h2 id="一、检查Anki版本"><a href="#一、检查Anki版本" class="headerlink" title="一、检查Anki版本"></a>一、检查Anki版本</h2><p>安装上面所说的版本。</p><p>点击下一步。。。</p><p><a href="https://imgtu.com/i/bTGMlD"><img src="https://s1.ax1x.com/2022/03/12/bTGMlD.png" alt="bTGMlD.png"></a></p><h2 id="二、设置Anki同步地址"><a href="#二、设置Anki同步地址" class="headerlink" title="二、设置Anki同步地址"></a>二、设置Anki同步地址</h2><h4 id="（1）添加根证书到受信任的系统证书区"><a href="#（1）添加根证书到受信任的系统证书区" class="headerlink" title="（1）添加根证书到受信任的系统证书区"></a>（1）添加根证书到受信任的系统证书区</h4><p>有如下弹窗请点击是。</p><p><a href="https://imgtu.com/i/bT8bQg"><img src="https://s1.ax1x.com/2022/03/12/bT8bQg.png" alt="bT8bQg.png"></a></p><h4 id="（2）设置手机Anki同步地址"><a href="#（2）设置手机Anki同步地址" class="headerlink" title="（2）设置手机Anki同步地址"></a>（2）设置手机Anki同步地址</h4><p>1.在桌面找到<code>rootCA.crt</code> ，用QQ、USB、微信等发送文件到手机，并在手机中找到它，触摸弹出证书安装界面。仅安装一次，后续部署过程中无需此操作。</p><p><a href="https://imgtu.com/i/bTGKSO"><img src="https://s1.ax1x.com/2022/03/12/bTGKSO.png" alt="bTGKSO.png"></a></p><p>2.手机开启在定义同步服务器，进入 设置-&gt;高级设置-&gt;自定义同步服务器（点击后勾选）</p><p>3.填写引导程序界面的同步地址和媒体文件同步地址，点击开关进入下一步。。。</p><p><a href="https://imgtu.com/i/jC122d"><img src="https://s1.ax1x.com/2022/06/23/jC122d.png" alt="jC122d.png"></a></p><h2 id="三、将服务器端启动程序发送到桌面快捷方式，并添加到开始菜单"><a href="#三、将服务器端启动程序发送到桌面快捷方式，并添加到开始菜单" class="headerlink" title="三、将服务器端启动程序发送到桌面快捷方式，并添加到开始菜单"></a>三、将服务器端启动程序发送到桌面快捷方式，并添加到开始菜单</h2><p><a href="https://imgtu.com/i/bTGeFx"><img src="https://s1.ax1x.com/2022/03/12/bTGeFx.png" alt="bTGeFx.png"></a></p><p>添加到开始菜单意味着可以通过开始搜索框快捷启动软件</p><p>然后就在桌面看到了上面的图标，点击下一步。。。</p><h2 id="四、新建账号-账号管理"><a href="#四、新建账号-账号管理" class="headerlink" title="四、新建账号/账号管理"></a>四、新建账号/账号管理</h2><p>选择 添加账号 ，再点击 提交选择，会出现输入框，输入简单的用户名和密码 ，点击 提交，即添加成功，点击下一步。。。</p><p><a href="https://imgtu.com/i/bT8jwn"><img src="https://s1.ax1x.com/2022/03/12/bT8jwn.png" alt="bT8jwn.png"></a></p><h2 id="五、打开同步服务、Anki切换配置方案-填写账号"><a href="#五、打开同步服务、Anki切换配置方案-填写账号" class="headerlink" title="五、打开同步服务、Anki切换配置方案,填写账号"></a>五、打开同步服务、Anki切换配置方案,填写账号</h2><p>1.在桌面找到第五步发送的快捷方式Anki_server，双击后会出现黑色窗口（同步过程中保持运行），可最小化运行。如果采用DHCP动态分配IP的设备（比如校园网），请下翻至问答区Q2.</p><p><a href="https://imgtu.com/i/bTGmY6"><img src="https://s1.ax1x.com/2022/03/12/bTGmY6.png" alt="bTGmY6.png"></a></p><p>2.打开电脑 Anki，建议 到<strong>文件–&gt;切换配置方案–&gt;添加</strong>新的配置方案并进入（如果有牌组，先导出），点击同步，输入刚刚创建的账号密码，成功后再导入牌组。</p><p><strong>百度网盘链接:</strong></p><p>**Windows Anki **，<a class="link"   href="https://apps.ankiweb.net/" >Anki官网下载<i class="fas fa-external-link-alt"></i></a>，<a class="link"   href="https://github.com/ankitects/anki/releases" >PC 历史版本<i class="fas fa-external-link-alt"></i></a></p><p><strong>Ankidroid</strong>：<a class="link"   href="https://pan.baidu.com/s/1_sEx8PXrraQuXlsfx_Y3EA" >百度网盘链接（提取码：2020）<i class="fas fa-external-link-alt"></i></a>，<a class="link"   href="https://f-droid.org/packages/com.ichi2.anki/" >F-droid市场下载<i class="fas fa-external-link-alt"></i></a>，<a class="link"   href="https://github.com/ankidroid/Anki-Android/releases" >gtihub下载<i class="fas fa-external-link-alt"></i></a></p><p><strong>服务器端软件</strong>（提取码：2021）：<a class="link"   href="https://pan.baidu.com/s/1NMGVGzJ2nm6wmWSZDNn5iQ" >点这里<i class="fas fa-external-link-alt"></i></a></p><p><strong>阿里云盘链接：</strong></p><p><strong>服务器端软件</strong><a class="link"   href="https://www.aliyundrive.com/s/inbib8Fkx21" >点这里<i class="fas fa-external-link-alt"></i></a></p><p><strong>问答区：</strong></p><p><strong>Q1：配置并打开服务器后，电脑端anki能够同步，手机端却不行？</strong></p><p>A：1.手机端anki IP是否配置正确，比如https去掉s 2.手机和电脑是否在同一局域网下 3.电脑开启了防火墙，把防火墙关掉。</p><p><strong>Q2:某天打开服务端软件开始同步，发现突然出现错误，明明账号和密码都对，以前都可以同步？</strong></p><p>可能设备采用DHCP动态分配IP,说明服务端所在的电脑被分配的IP已经发生变动；每次服务端软件anki_server(ankisyncd)启动会检测本机ip是否发生变化，如果发生变动，会自动修改电脑Anki的IP，并将详细的新地址打印到服务端黑色窗口，需要你手动填写到安卓Ankidroid的相应界面。<br><a href="https://imgtu.com/i/bTGnfK"><img src="https://s1.ax1x.com/2022/03/12/bTGnfK.png" alt="bTGnfK.png"></a></p><p><strong>参考文章：</strong></p><p><a class="link"   href="https://blog.dteam.top/posts/2019-04/%E6%9C%AC%E5%9C%B0https%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88mkcert.html" >本地https快速解决方案——mkcert<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://github.com/ankicommunity/anki-sync-server-rs" >ankicommunity/anki-sync-server-rs<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
            <tag> 搭建Anki服务器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
