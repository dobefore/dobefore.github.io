<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>gen-c-dynamical-library-using-rust-and-call</title>
      <link href="/gen-c-dynamical-library-using-rust/"/>
      <url>/gen-c-dynamical-library-using-rust/</url>
      
        <content type="html"><![CDATA[<h3 id="使用rust生成动态库cdylib"><a href="#使用rust生成动态库cdylib" class="headerlink" title="使用rust生成动态库cdylib"></a>使用rust生成动态库cdylib</h3><h4 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h4><pre class="language-none"><code class="language-none">├── Cargo.lock├── Cargo.toml└── src    └── lib.rs</code></pre><h4 id="Cargo-toml"><a href="#Cargo-toml" class="headerlink" title="Cargo.toml"></a>Cargo.toml</h4><pre class="language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">lib</span><span class="token punctuation">]</span><span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">"rustdll"</span> <span class="token comment">#生成dll的文件名</span><span class="token key property">crate-type</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"cdylib"</span><span class="token punctuation">]</span></code></pre><h4 id="lib-rs"><a href="#lib-rs" class="headerlink" title="lib.rs"></a>lib.rs</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[no_mangle]</span><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function-definition function">gettime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"from rust dll &#123;&#125;"</span><span class="token punctuation">,</span>input<span class="token punctuation">)</span></code></pre><p>build之后，在Windows平台会生成两个文件 <code>rustdll.dll</code>可导入路``rustdll.dll.lib<code> ；而在Linux平台生成文件</code>librustdll.so`</p><h3 id="调用由rust生成的动态库里的函数"><a href="#调用由rust生成的动态库里的函数" class="headerlink" title="调用由rust生成的动态库里的函数"></a>调用由rust生成的动态库里的函数</h3><h4 id="layout-1"><a href="#layout-1" class="headerlink" title="layout"></a>layout</h4><pre class="language-none"><code class="language-none">aa&#x2F;├── Cargo.lock├── Cargo.toml├── build.rs├── lib│   └── librustdll.so└── src    └── main.rs</code></pre><h4 id="LInux"><a href="#LInux" class="headerlink" title="LInux"></a>LInux</h4><p>build.rs</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// indicate dynamical library</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"cargo:rustc-link-lib=dylib=rustdll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// search lib directory,relative path is also ok</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"cargo:rustc-link-search=native=/home/ubuntu/aa/lib"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>src/main.rs</p><pre class="language-rust" data-language="rust"><code class="language-rust">和 build<span class="token punctuation">.</span>rs 中的cargo<span class="token punctuation">:</span>rustc<span class="token operator">-</span>link<span class="token operator">-</span>lib 二选一<span class="token comment">//#[link(name = "rustdll")]</span><span class="token keyword">extern</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">gettime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">&#123;</span>        <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>build command</p><p>if <code>cargo build</code>,可以编译但link error</p><pre class="language-none"><code class="language-none">ldd target&#x2F;debug&#x2F;aa       linux-vdso.so.1 (0x00007ffd5b12d000)       librustdll.so &#x3D;&gt; not found</code></pre><p>add new flags</p><pre class="language-none"><code class="language-none">cargo rustc -- -C link-args&#x3D;&quot;-Wl,-rpath,&#x2F;home&#x2F;ubuntu&#x2F;aa&#x2F;lib&#x2F;&quot;</code></pre><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>src/main.rs</p><pre class="language-rust" data-language="rust"><code class="language-rust">和 build<span class="token punctuation">.</span>rs 中的cargo<span class="token punctuation">:</span>rustc<span class="token operator">-</span>link<span class="token operator">-</span>lib 二选一<span class="token comment">//#[link(name = "rustdll.dll")]</span><span class="token keyword">extern</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">gettime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">&#123;</span>        <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>build.rs</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// search import library .lib</span> <span class="token comment">// indicate dynamical library</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"cargo:rustc-link-lib=dylib=rustdll.dll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// search lib directory,relative path is also ok</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"cargo:rustc-link-search=native=.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>将<code>rustdll.dll</code>和<code>rustdll.dll.lib</code>放在和aa同目录下，执行<code>cargo build</code></p><p>完成后，将可执行文件和动态库文件放在同一文件夹下即可</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://ostack.cn/?qa=621344/">Linking Rust application with a dynamic library not in the runtime linker search path</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> cdylib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>build_ankisyncd</title>
      <link href="/build-ankisyncd/"/>
      <url>/build-ankisyncd/</url>
      
        <content type="html"><![CDATA[<p>disable git verify ssl</p><pre class="language-none"><code class="language-none">export GIT_SSL_NO_VERIFY&#x3D;true</code></pre><h3 id="Configure-gcc"><a href="#Configure-gcc" class="headerlink" title="Configure  gcc"></a>Configure  gcc</h3><h4 id="Install-the-C-cross-toolchain-only-for-armv7"><a href="#Install-the-C-cross-toolchain-only-for-armv7" class="headerlink" title="Install the C cross toolchain(only for armv7)"></a>Install the C cross toolchain(only for armv7)</h4><pre class="language-none"><code class="language-none"># Step 1: Install the C cross toolchain$ sudo apt-get install -qq gcc-arm-linux-gnueabihf</code></pre><h4 id="add-cargo-compiled-standard-crates"><a href="#add-cargo-compiled-standard-crates" class="headerlink" title="add cargo compiled standard crates"></a>add cargo compiled standard crates</h4><pre class="language-none"><code class="language-none">#for aarch54rustup target add aarch64-unknown-linux-musl# for aarch32&#x2F;armv7rustup target add armv7-unknown-linux-musleabihf#for darwin macosrustup target add x86_64-apple-darwin</code></pre><h4 id="download-cross-compile-toolchains-and-set-ENV-var"><a href="#download-cross-compile-toolchains-and-set-ENV-var" class="headerlink" title="download cross-compile toolchains and set ENV var"></a>download cross-compile toolchains and set ENV var</h4><ol><li>aarch64/x86_64</li></ol><p>enter site <a href="https://link.zhihu.com/?target=https://musl.cc/">https://musl.cc/</a>  to get musl-gcc and decompression</p><p>export bin (x86_64-linux-musl-native seems not able to build ,so use cross version)</p><pre class="language-none"><code class="language-none">export PATH&#x3D;&quot;$HOME&#x2F;aarch64-linux-musl-cross&#x2F;bin:$PATH&quot;export PATH&#x3D;&quot;$HOME&#x2F;x86_64-linux-musl-cross&#x2F;bin:$PATH&quot;source ~&#x2F;.profile</code></pre><ol start="2"><li><p>armv7</p><pre class="language-none"><code class="language-none">git clone --depth 1 https:&#x2F;&#x2F;github.com&#x2F;raspberrypi&#x2F;tools.git rpitools</code></pre><p>export bin</p><pre class="language-none"><code class="language-none">export PATH&#x3D;&quot;$HOME&#x2F;rpitools&#x2F;arm-bcm2708&#x2F;arm-rpi-4.9.3-linux-gnueabihf&#x2F;bin:$PATH&quot;</code></pre></li><li><p>macos</p><pre class="language-none"><code class="language-none"># Install build dependenciessudo apt install \    clang \    gcc \    g++ \    zlib1g-dev \    libmpc-dev \    libmpfr-dev \    libgmp-dev \    libxml2-dev</code></pre></li></ol><p>Add the following to a script called osxcross_setup.sh and make it executable.</p><pre class="language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;tpoechtrager&#x2F;osxcrosscd osxcrosswget -nc https:&#x2F;&#x2F;s3.dockerproject.org&#x2F;darwin&#x2F;v2&#x2F;MacOSX10.10.sdk.tar.xzmv MacOSX10.10.sdk.tar.xz tarballs&#x2F;UNATTENDED&#x3D;yes OSX_VERSION_MIN&#x3D;10.7 .&#x2F;build.sh</code></pre><p>run sh</p><pre class="language-none"><code class="language-none">.&#x2F;osxcross_setup.sh</code></pre><p>Add to PATH ENV</p><pre class="language-none"><code class="language-none">export PATH&#x3D;&quot;&#x2F;home&#x2F;ubuntu&#x2F;osxcross&#x2F;target&#x2F;bin:$PATH&quot;</code></pre><h4 id="Configure-Cargo"><a href="#Configure-Cargo" class="headerlink" title="Configure Cargo"></a>Configure Cargo</h4><p>   cat ~/.cargo/config</p>   <pre class="language-none"><code class="language-none">   [target.x86_64-apple-darwin]linker &#x3D; &quot;x86_64-apple-darwin14-clang&quot;ar &#x3D; &quot;x86_64-apple-darwin14-ar&quot;   [target.aarch64-unknown-linux-musl]   linker &#x3D; &quot;aarch64-linux-musl-gcc&quot;   rustflags &#x3D; [&quot;-C&quot;, &quot;target-feature&#x3D;+crt-static&quot;, &quot;-C&quot;, &quot;link-arg&#x3D;-lgcc&quot;]      [target.armv7-unknown-linux-musleabihf]   linker &#x3D; &quot;arm-linux-musleabihf-gcc&quot;   rustflags  &#x3D; [       &quot;-C&quot;, &quot;target-feature&#x3D;+crt-static&quot;,       &quot;-C&quot;, &quot;link-args&#x3D;-static&quot;,   ]      [target.x86_64-unknown-linux-musl]   linker &#x3D; &quot;x86_64-linux-musl-gcc&quot;   rustflags &#x3D; [&quot;-C&quot;, &quot;target-feature&#x3D;+crt-static&quot;, &quot;-C&quot;, &quot;link-args&#x3D;-static&quot;,]      [net]   retry &#x3D; 2 # 失败 自动重试 次数   git-fetch-with-cli &#x3D; true</code></pre><h3 id="Cross-compile-openssl"><a href="#Cross-compile-openssl" class="headerlink" title="Cross-compile openssl"></a>Cross-compile openssl</h3><h4 id="cross-compile"><a href="#cross-compile" class="headerlink" title="cross-compile"></a>cross-compile</h4><pre class="language-none"><code class="language-none">wget https:&#x2F;&#x2F;www.openssl.org&#x2F;source&#x2F;openssl-1.0.1t.tar.gztar -zxvf openssl-OpenSSL_1_1_1fcd ..# for aarch64export MACHINE&#x3D;aarch64export ARCH&#x3D;armexport CC&#x3D;aarch64-linux-musl-gcc# for x86_64export MACHINE&#x3D;x86_64export ARCH&#x3D;x86_64export CC&#x3D;x86_64-linux-musl-gcc#aarch32&#x2F;armv7export MACHINE&#x3D;armv7export ARCH&#x3D;arm# in rpitoolsexport CC&#x3D;arm-linux-gnueabihf-gcccd openssl-OpenSSL_1_1_1f# add --prefix&#x3D;dir to apoint dir will be make install.&#x2F;config shared &amp;&amp; makecd ..# dont know if its true.fisrt time will build failed.change add OPENSSL_LIB_DIR # with lib,then build,this will fail and last change back and build export OPENSSL_LIB_DIR&#x3D;&#x2F;home&#x2F;ubuntu&#x2F;openssl-1.0.1t&#x2F;export OPENSSL_INCLUDE_DIR&#x3D;&#x2F;home&#x2F;ubuntu&#x2F;openssl-1.0.1t&#x2F;includeexport OPENSSL_STATIC&#x3D;true</code></pre><h4 id="cross-compile-libsqlite3"><a href="#cross-compile-libsqlite3" class="headerlink" title="cross compile libsqlite3"></a>cross compile libsqlite3</h4><p>this step isnt necessary during build ankisyncd,do in build<br>everydaytask.</p><pre class="language-none"><code class="language-none">export CC&#x3D;aarch64-linux-musl-gcc .&#x2F;configure --host&#x3D;aarch64 --prefix&#x3D;&#x2F;home&#x2F;ubuntu&#x2F;sqlmake &amp; make install  export SQLITE3_LIB_DIR&#x3D;$HOME&#x2F;sql&#x2F;bin&#x2F; export SQLITE3_INCLUDE_DIR&#x3D;$HOME&#x2F;sql&#x2F;include&#x2F;</code></pre><h3 id="build-ankisyncd"><a href="#build-ankisyncd" class="headerlink" title="build ankisyncd"></a>build ankisyncd</h3><p>at last ,build</p><pre class="language-none"><code class="language-none"># aarch64cargo build --target&#x3D;aarch64-unknown-linux-musl --release#aarch32&#x2F;armv7 cargo build --target armv7-unknown-linux-musleabihf --release#linux x86_64cargo build --release --target&#x3D;x86_64-unknown-linux-musl# MacOS x86_64CC&#x3D;o64-clang \CXX&#x3D;o64-clang++ \SQLITE3_SYS_STATIC&#x3D;1 \OPENSSL_SYS_STATIC&#x3D;1 \cargo build --target x86_64-apple-darwin</code></pre><p>package and compression</p><pre class="language-none"><code class="language-none">tar -czvf ankisyncd_linux_armv7.tar.gz ankisyncd ankisyncctl</code></pre><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://jiapeng.me/helium-gateway-rs-compile/">cross compile for armv7</a></li><li><a href="https://github.com/japaric/rust-cross">rust cross github</a></li><li><a href="https://www.cnblogs.com/sevenyuan/p/13663372.html">交叉编译rust-openssl crate for armv7</a></li><li><a href="https://qiita.com/liubin/items/6c94f0b61f746c08b74c">How to build openssl-sys crate for musl in Rust</a></li><li><a href="https://www.jianshu.com/p/7d599bdf370a">git错误error: server certificate verification failed. CAfile:</a></li><li><a href="https://rustwiki.org/zh-CN/edition-guide/rust-2018/platform-and-target-support/musl-support-for-fully-static-binaries.html">MUSL 支持完全静态二进制文件</a></li><li><a href="https://doc.rust-lang.org/cargo/reference/config.html">git-fetch-with-cli</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> cross-compile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust-fatal-error-link1201</title>
      <link href="/rust-fatal-error-link1201/"/>
      <url>/rust-fatal-error-link1201/</url>
      
        <content type="html"><![CDATA[<p>on occationally,当我run <code>cargo build</code> using building tool msvc,error appears as follows:</p><pre class="language-none"><code class="language-none">note: LINK : fatal error LNK1201: error writing to program database&#39;D:\software\vscode_project\anki_sync\anki-sync-server-rs\target\debug\build\futures-channel-29fccd2a64763c5c\build_script_build-29fccd2a64763c5c.pdb&#39;; check for insufficient diskspace, invalid path, or insufficient privilege</code></pre><p>after search the Internet,I find the solution. You can delete the file error info refers to,that is,in this situation,<code>D:\software\vscode_project\anki_sync\anki-sync-server-rs\target\debug\build\futures-channel-29fccd2a64763c5c\build_script_build-29fccd2a64763c5c.pdb</code>. Or you just can delete folder /target ,problems  solved.</p><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><ul><li><a href="https://stackoverflow.com/questions/35662865/fatal-error-lnk1201-error-writing-to-program-database-visual-studio-2003">fatal error LNK1201: error writing to program database - Visual Studio 2003</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> program language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sciter-rs控件中文显示乱码</title>
      <link href="/rust-sciter-utf8-support/"/>
      <url>/rust-sciter-utf8-support/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>在用Rust运行sciter app 时，控件文字包含中文会出现乱码的问题。</p><h1 id="How-to-Fix"><a href="#How-to-Fix" class="headerlink" title="How to Fix"></a>How to Fix</h1><ol><li>如果在html页面里面，在 <code>&lt;head&gt;</code>标签里加上<code>meta</code> 标签注明字符集<code>utf-8</code>。</li></ol><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><p>如果是以BOM开始的utf8资源.</p><pre class="language-none"><code class="language-none">first three bytes: EF BB BF). #不是太明白</code></pre><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1></li></ol><ul><li><a href="https://sciter.com/forums/topic/sciterloadhtml-and-utf-8/">sciterloadhtml-and-utf-8</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> program language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> gui </tag>
            
            <tag> sciter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust中的文本断行（newline）</title>
      <link href="/newline-differ-in-Windows-and-Linux/"/>
      <url>/newline-differ-in-Windows-and-Linux/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>在Windows平台用Rust编程，有时候需要写入batch（.bat）文件，但是却不能正确地执行。</p><p>下面是一个发送应用的快捷方式到桌面的batch。</p><span id="more"></span><pre class="language-basic" data-language="basic"><code class="language-basic">@echo <span class="token keyword">off</span><span class="token punctuation">:</span><span class="token punctuation">:</span>设置程序或文件的完整路径（必选）<span class="token function">set</span> <span class="token function">Program</span><span class="token operator">=</span>C<span class="token punctuation">:</span>\Users\Admin\Desktop\anki_server.exe<span class="token punctuation">:</span><span class="token punctuation">:</span>设置快捷方式名称（必选）<span class="token function">set</span> LnkName<span class="token operator">=</span>anki_server<span class="token punctuation">:</span><span class="token punctuation">:</span>设置程序的工作路径，一般为程序主目录，此项若留空，脚本将自行分析路径<span class="token function">set</span> WorkDir<span class="token operator">=</span><span class="token punctuation">:</span><span class="token punctuation">:</span>设置快捷方式显示的说明（可选）<span class="token function">set</span> Desc<span class="token operator">=</span>测试<span class="token keyword">if</span> <span class="token operator">not</span> defined WorkDir <span class="token keyword">call</span><span class="token punctuation">:</span>GetWorkDir <span class="token string">"%Program%"</span><span class="token punctuation">(</span>echo <span class="token function">Set</span> WshShell<span class="token operator">=</span>CreateObject<span class="token punctuation">(</span><span class="token string">"WScript.Shell"</span><span class="token operator">^</span><span class="token punctuation">)</span>echo strDesKtop<span class="token operator">=</span>WshShell.SpecialFolders<span class="token punctuation">(</span><span class="token string">"DesKtop"</span><span class="token operator">^</span><span class="token punctuation">)</span>echo <span class="token function">Set</span> oShellLink<span class="token operator">=</span>WshShell.CreateShortcut<span class="token punctuation">(</span>strDesKtop<span class="token operator">^</span><span class="token operator">&amp;</span>"\%LnkName%.lnk"<span class="token operator">^</span><span class="token punctuation">)</span>echo oShellLink.TargetPath<span class="token operator">=</span><span class="token string">"%Program%"</span>echo oShellLink.WorkingDirectory<span class="token operator">=</span><span class="token string">"%WorkDir%"</span>echo oShellLink.WindowStyle<span class="token operator">=</span><span class="token number">1</span>echo oShellLink.Description<span class="token operator">=</span><span class="token string">"%Desc%"</span>echo oShellLink.Save<span class="token punctuation">)</span><span class="token operator">></span>makelnk.vbsecho created shelllnk OKmakelnk.vbsdel <span class="token operator">/</span>f <span class="token operator">/</span>q makelnk.vbs<span class="token keyword">exit</span><span class="token keyword">goto</span> <span class="token punctuation">:</span>eof<span class="token punctuation">:</span>GetWorkDir<span class="token function">set</span> WorkDir<span class="token operator">=</span>%~dp1<span class="token function">set</span> WorkDir<span class="token operator">=</span>%WorkDir<span class="token punctuation">:</span>~<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span>%<span class="token keyword">goto</span> <span class="token punctuation">:</span>eof</code></pre><p>执行后得到，’柟寮忓悕绉帮紙蹇呴€夛級’ 不是内部或外部命令，也不是可运行的程序或批处理文件。</p><h2 id="Rust写文件默认的newline"><a href="#Rust写文件默认的newline" class="headerlink" title="Rust写文件默认的newline"></a>Rust写文件默认的newline</h2><h3 id="Windows中的体现"><a href="#Windows中的体现" class="headerlink" title="Windows中的体现"></a>Windows中的体现</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token string">"f.txt"</span><span class="token punctuation">;</span><span class="token comment">// </span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> file <span class="token operator">=</span> <span class="token class-name">OpenOptions</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token macro property">writeln!</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token macro property">writeln!</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行后，用记事本<code>f.txt</code>打开，显示如下：</p><p><img src="https://z3.ax1x.com/2021/06/09/2cGvLD.png" alt="Linux_newline" loading="lazy">](<a href="https://imgtu.com/i/2cGvLD">https://imgtu.com/i/2cGvLD</a>)</p><p>结果看出是Unix风格的newline “”\n”，再看下Rust writeln!的文档说明：</p><blockquote><p>On all platforms, the newline is the LINE FEED character (<code>\n</code>/<code>U+000A</code>) alone (no additional CARRIAGE RETURN (<code>\r</code>/<code>U+000D</code>).</p></blockquote><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>Rust中为我们提供了macro  write!()，并没有newline。我们自己提供newline风格CRLE（\r\n）。</p><pre class="language-none"><code class="language-none">write!(file, &quot;&#123;&#125;\r\n&quot;,&quot;c&quot;).unwrap();</code></pre>]]></content>
      
      
      <categories>
          
          <category> program language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无职转生～在异世界认真地活下去小说下载</title>
      <link href="/wzzs/"/>
      <url>/wzzs/</url>
      
        <content type="html"><![CDATA[<p>从qianbixiaoshuo上获取的<strong>无职转生～在异世界认真地活下去</strong>小说1-24卷提供百度网盘下载，txt和mobi(无目录) </p><span id="more"></span><p>网盘链接：<a href="https://pan.baidu.com/s/1fC61scDXaAXayJko60uj3Q">点此跳转网盘</a></p><p>提取码：2020</p>]]></content>
      
      
      <categories>
          
          <category> book </category>
          
      </categories>
      
      
        <tags>
            
            <tag> resource </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows搭建基于https协议的Anki局域网同步服务器</title>
      <link href="/set_up_anki_custom_server_on_https_protocol/"/>
      <url>/set_up_anki_custom_server_on_https_protocol/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇是配合Ankidroid版本&gt;= <code> 2.10</code> 使用的，若不符合情况的请阅读教程<a href="https://dobefore.github.io/setup_anki_server_on_Windows/">Anki自建局域网同步服务器</a></p></blockquote><hr><p><strong>配置满足的条件</strong>有：</p><ul><li>Windows Anki版本2.1（版本：帮助–&gt;关于）</li><li>安卓平台 Ankidroid 版本 &gt;=2.8</li><li>同步时局域网（手机热点，WIFI）内和在电脑旁</li><li>IOS anki （ipad，iphone等）不能同步。</li></ul><p><strong>首先运行</strong>引导配置程序，请双击<strong>deployer.exe。</strong></p><h2 id="Attention-请先打开手机Anki查看版本（设置–-gt-高级设置–-gt-关于）"><a href="#Attention-请先打开手机Anki查看版本（设置–-gt-高级设置–-gt-关于）" class="headerlink" title="Attention:请先打开手机Anki查看版本（设置–&gt;高级设置–&gt;关于）"></a>Attention:请先打开手机Anki查看版本（设置–&gt;高级设置–&gt;关于）</h2><p>为什么要区分2.10和2.10以后呢？前往下面的问答区 Q2。</p><h2 id="一、检查Anki版本"><a href="#一、检查Anki版本" class="headerlink" title="一、检查Anki版本"></a>一、检查Anki版本</h2><p>安装上面所说的版本。</p><p>点击下一步。。。</p><p><a href="https://imgtu.com/i/Rdjixe"><img src="https://z3.ax1x.com/2021/06/29/Rdjixe.jpg" alt="Rdjixe.jpg" loading="lazy"></a></p><h2 id="二、更改电脑Anki-IP同步地址"><a href="#二、更改电脑Anki-IP同步地址" class="headerlink" title="二、更改电脑Anki IP同步地址"></a>二、更改电脑Anki IP同步地址</h2><p>在这里，你需要选择手机Anki版本的范围，是&lt;2.10?比如2.9.7，2.8；还是&gt;=2.10?比如2.10，2.10.5，2.14。选择后，点击提交选择，等待点击下一步。</p><h3 id=""><a href="#" class="headerlink" title=""></a><a href="https://imgtu.com/i/Rdv1fK"><img src="https://z3.ax1x.com/2021/06/29/Rdv1fK.png" alt="Rdv1fK.png" loading="lazy"></a></h3><h2 id="三、配置手机Anki-IP同步地址"><a href="#三、配置手机Anki-IP同步地址" class="headerlink" title="三、配置手机Anki IP同步地址"></a>三、配置手机Anki IP同步地址</h2><p>1.在桌面找到<code>rootCA.crt</code> ,双击它，会弹出证书导入界面，按照图片操作。注：第二次运行deployer,即表示你已经将步骤已经完成了一遍，就无需进行此操作。</p><p><a href="https://imgtu.com/i/tovFJS"><img src="https://s1.ax1x.com/2020/06/10/tovFJS.jpg" alt="tovFJS.jpg" loading="lazy"></a></p><p>并将上述文件复制到手机（QQ、USB、微信），并在手机中找到它，触摸弹出证书安装界面。</p><p><a href="https://imgtu.com/i/RwSESf"><img src="https://z3.ax1x.com/2021/06/29/RwSESf.jpg" alt="RwSESf.jpg" loading="lazy"></a></p><p>操作后，点击引导程序上方右侧 确认，随即出现io地址。</p><p>2.手机开启在定义同步服务器，进入 设置-&gt;高级设置-&gt;自定义同步服务器（点击后勾选）</p><p>2.填写引导程序界面的同步地址和媒体文件同步地址（默认anki版本范围&gt;=2.10），点击下一步。。。</p><p><a href="https://imgtu.com/i/RdvlY6"><img src="https://z3.ax1x.com/2021/06/29/RdvlY6.png" alt="RdvlY6.png" loading="lazy"></a></p><h2 id="四、将服务器端启动程序发送到桌面快捷方式"><a href="#四、将服务器端启动程序发送到桌面快捷方式" class="headerlink" title="四、将服务器端启动程序发送到桌面快捷方式"></a>四、将服务器端启动程序发送到桌面快捷方式</h2><p><a href="https://imgtu.com/i/RdXDEt"><img src="https://z3.ax1x.com/2021/06/29/RdXDEt.png" alt="RdXDEt.png" loading="lazy"></a></p><p>然后就在桌面看到了上面的图标，点击下一步。。。</p><h2 id="五、新建账号-账号管理"><a href="#五、新建账号-账号管理" class="headerlink" title="五、新建账号/账号管理"></a>五、新建账号/账号管理</h2><p>选择 添加账号 ，再点击 提交选择，会出现输入框，输入简单的用户名和密码 ，点击 提交输入，即添加成功，点击下一步。。。</p><p><a href="https://imgtu.com/i/RwpAE9"><img src="https://z3.ax1x.com/2021/06/29/RwpAE9.png" alt="RwpAE9.png" loading="lazy"></a></p><h2 id="六、打开同步服务、Anki切换配置方案-填写账号"><a href="#六、打开同步服务、Anki切换配置方案-填写账号" class="headerlink" title="六、打开同步服务、Anki切换配置方案,填写账号"></a>六、打开同步服务、Anki切换配置方案,填写账号</h2><p>1.在桌面找到第五步发送的快捷方式Anki_server，双击后会出现黑色窗口（同步过程中保持运行），可最小化运行。如果采用DHCP动态分配IP的设备（比如校园网），请下翻至问答区Q3.</p><p><a href="https://imgtu.com/i/RdX0HI"><img src="https://z3.ax1x.com/2021/06/29/RdX0HI.png" alt="RdX0HI.png" loading="lazy"></a></p><p>2.打开电脑 Anki，建议 到<strong>文件–&gt;切换配置方案–&gt;添加</strong>新的配置方案并进入（如果有牌组，先导出），点击同步，输入刚刚创建的账号密码，成功后再导入牌组。</p><p><strong>百度网盘链接:</strong></p><p>**Windows Anki **，<a href="https://apps.ankiweb.net/">Anki官网下载</a>，<a href="https://github.com/ankitects/anki/releases">PC 历史版本</a></p><p><strong>Ankidroid</strong>：<a href="https://pan.baidu.com/s/1_sEx8PXrraQuXlsfx_Y3EA">百度网盘链接（提取码：2020）</a>，<a href="https://f-droid.org/packages/com.ichi2.anki/">F-droid市场下载</a>，<a href="https://github.com/ankidroid/Anki-Android/releases">gtihub下载</a></p><p><strong>服务器端软件</strong>（提取码：2021）：<a href="https://pan.baidu.com/s/1x6K2Q27lVvyiBDNIQpQl2w">点这里</a></p><p><strong>阿里云盘链接：</strong></p><p><strong>服务器端软件</strong><a href="https://www.aliyundrive.com/s/nRavoNX7r26">点这里</a></p><p><strong>问答区：</strong></p><p><strong>Q1：配置并打开服务器后，电脑端anki能够同步，手机端却不行？</strong></p><p>A：1.手机端anki IP是否配置正确，比如https去掉s 2.手机和电脑是否在同一局域网下 3.电脑开启了防火墙，把防火墙关掉。</p><p><strong>Q2：为什么会有&lt;2.10和&gt;=2.10的手机Anki版本的区分？</strong></p><p>其实是Ankidroid9及以后Anki不被允许http传输文件，也就是说你的手机安卓版本在9以内，不管Anki版本是2.8还是2.14都可以选择&lt;2.10的配置。</p><p><strong>Q3:某天打开服务端软件开始同步，发现突然出现错误，明明账号和密码都对，以前都可以同步？</strong></p><p>可能设备采用DHCP动态分配IP,说明服务端所在的电脑被分配的IP已经发生变动；每次服务端软件anki_server(ankisyncd)启动会检测本机ip是否发生变化，如果发生变动，会自动修改电脑Anki的IP，并将详细的新地址打印到服务端黑色窗口，需要你手动填写到安卓Ankidroid的相应界面。<br>[<img src="https://s4.ax1x.com/2021/12/24/TNF8h9.jpg" alt="TNF8h9.jpg" loading="lazy">]</p><hr><p><strong>参考文章：</strong></p><p><a href="https://blog.dteam.top/posts/2019-04/%E6%9C%AC%E5%9C%B0https%E5%BF%AB%E9%80%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88mkcert.html">本地https快速解决方案——mkcert</a></p><p><a href="https://github.com/ankicommunity/anki-sync-server-rs">ankicommunity/anki-sync-server-rs</a></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
            <tag> 搭建Anki服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Anki局域网同步服务器(Windows)</title>
      <link href="/setup_anki_server_on_Windows/"/>
      <url>/setup_anki_server_on_Windows/</url>
      
        <content type="html"><![CDATA[<p>这个教程是介绍搭建anki服务器的<strong>Windows免安装</strong>软件（64位哦），文章末尾标准版<strong>百度云盘链接自取</strong>哟；如果需要远程安装，需要收取<strong>￥3</strong>至<strong>5</strong>元的服务费哟（可以在咸鱼上更快联系到我哟）。</p><p><strong>配置满足的条件</strong>有：</p><ul><li>Windows Anki版本2.1（版本：帮助–&gt;关于）</li><li>安卓平台 Ankidroid 版本 &gt;=2.8</li><li>同步时局域网（手机热点，WIFI）内和在电脑旁</li><li>IOS anki （ipad，iphone等）不能同步。</li></ul><p><strong>首先运行</strong>引导配置程序，请双击<strong>deployer.exe。</strong></p><h2 id="Attention-请先打开手机Anki查看版本（设置–-gt-高级设置–-gt-关于）"><a href="#Attention-请先打开手机Anki查看版本（设置–-gt-高级设置–-gt-关于）" class="headerlink" title="Attention:请先打开手机Anki查看版本（设置–&gt;高级设置–&gt;关于）"></a>Attention:请先打开手机Anki查看版本（设置–&gt;高级设置–&gt;关于）</h2><p>为什么要区分2.10和2.10以后呢？前往下面的问答区 Q2。</p><h2 id="一、检查Anki版本"><a href="#一、检查Anki版本" class="headerlink" title="一、检查Anki版本"></a>一、检查Anki版本</h2><p>安装上面所说的版本。</p><p>点击下一步。。。</p><p><a href="https://imgtu.com/i/Rdjixe"><img src="https://z3.ax1x.com/2021/06/29/Rdjixe.jpg" alt="Rdjixe.jpg" loading="lazy"></a></p><h2 id="二、更改电脑Anki-IP同步地址"><a href="#二、更改电脑Anki-IP同步地址" class="headerlink" title="二、更改电脑Anki IP同步地址"></a>二、更改电脑Anki IP同步地址</h2><p>在这里，你需要选择手机Anki版本的范围，是&lt;2.10?比如2.9.7，2.8；还是&gt;=2.10?比如2.10，2.10.5，2.14。选择后，点击提交选择，等待点击下一步。</p><h3 id=""><a href="#" class="headerlink" title=""></a><a href="https://imgtu.com/i/RdjArd"><img src="https://z3.ax1x.com/2021/06/29/RdjArd.jpg" alt="RdjArd.jpg" loading="lazy"></a></h3><p>1.手机开启在定义同步服务器，进入 设置-&gt;高级设置-&gt;自定义同步服务器（点击后勾选）</p><p>2.填写引导程序界面的同步地址和媒体文件同步地址（默认anki版本范围&lt;2.10），点击下一步。。。</p><p><a href="https://imgtu.com/i/RdvKT1"><img src="https://z3.ax1x.com/2021/06/29/RdvKT1.jpg" alt="RdvKT1.jpg" loading="lazy"></a></p><h2 id="三、将服务器端启动程序发送到桌面快捷方式"><a href="#三、将服务器端启动程序发送到桌面快捷方式" class="headerlink" title="三、将服务器端启动程序发送到桌面快捷方式"></a>三、将服务器端启动程序发送到桌面快捷方式</h2><p>这里会有弹框提示即将打开文件夹，确认后，在打开的文件夹找到 makelnk.vbs ,双击它。</p><p><a href="https://imgtu.com/i/RdXrUP"><img src="https://z3.ax1x.com/2021/06/29/RdXrUP.png" alt="RdXrUP.png" loading="lazy"></a></p><p><a href="https://imgtu.com/i/RdXDEt"><img src="https://z3.ax1x.com/2021/06/29/RdXDEt.png" alt="RdXDEt.png" loading="lazy"></a></p><p>然后就在桌面看到了上面的图标，点击下一步。。。</p><h2 id="四、新建账号-账号管理"><a href="#四、新建账号-账号管理" class="headerlink" title="四、新建账号/账号管理"></a>四、新建账号/账号管理</h2><p>选择 添加账号 ，再点击 提交选择，会出现输入框，输入简单的用户名和密码 ，点击 提交输入，即添加成功，点击下一步。。。</p><p><a href="https://imgtu.com/i/RdXs4f"><img src="https://z3.ax1x.com/2021/06/29/RdXs4f.png" alt="RdXs4f.png" loading="lazy"></a></p><h2 id="五、打开同步服务、Anki切换配置方案-填写账号"><a href="#五、打开同步服务、Anki切换配置方案-填写账号" class="headerlink" title="五、打开同步服务、Anki切换配置方案,填写账号"></a>五、打开同步服务、Anki切换配置方案,填写账号</h2><p>1.在桌面找到第五步发送的快捷方式Anki_server，双击后会出现黑色窗口（同步过程中保持运行），可最小化运行。如果采用DHCP动态分配IP的设备（比如校园网），请下翻至问答区Q3.</p><p><a href="https://imgtu.com/i/RdX0HI"><img src="https://z3.ax1x.com/2021/06/29/RdX0HI.png" alt="RdX0HI.png" loading="lazy"></a></p><p>2.打开电脑 Anki，建议 到<strong>文件–&gt;切换配置方案–&gt;添加</strong>新的配置方案并进入（如果有牌组，先导出），点击同步，输入刚刚创建的账号密码，成功后再导入牌组。</p><p><strong>百度网盘链接:</strong></p><p><strong>Windows Anki</strong> ：<a href="https://apps.ankiweb.net/">Anki官网下载</a>，<a href="https://github.com/ankitects/anki/releases">PC 历史版本</a></p><p><strong>Ankidroid</strong>：<a href="https://pan.baidu.com/s/1_sEx8PXrraQuXlsfx_Y3EA">百度网盘链接（提取码：2020）</a>，<a href="https://f-droid.org/packages/com.ichi2.anki/">F-droid市场下载</a>，<a href="https://github.com/ankidroid/Anki-Android/releases">gtihub下载</a></p><p><strong>服务器端软件</strong>（提取码：2021）：<a href="https://pan.baidu.com/s/1x6K2Q27lVvyiBDNIQpQl2w">点这里</a></p><p><strong>阿里云盘链接：</strong></p><p><strong>服务器端软件</strong><a href="https://www.aliyundrive.com/s/nRavoNX7r26">点这里</a></p><p><strong>问答区：</strong></p><p><strong>Q1：配置并打开服务器后，电脑端anki能够同步，手机端却不行？</strong></p><p>A：1.手机端anki IP是否配置正确，比如https去掉s 2.手机和电脑是否在同一局域网下 3.电脑开启了防火墙，把防火墙关掉。</p><p><strong>Q2：为什么会有&lt;2.10和&gt;=2.10的手机Anki版本的区分？</strong></p><p>其实是Ankidroid9及以后Anki不被允许http传输文件，也就是说你的手机安卓版本在9以内，不管Anki版本是2.8还是2.14都可以选择&lt;2.10的配置。</p><p><strong>Q3:某天打开服务端软件开始同步，发现突然出现错误，明明账号和密码都对，以前都可以同步？</strong></p><p>可能设备采用DHCP动态分配IP,说明服务端所在的电脑被分配的IP已经发生变动；每次服务端软件anki_server(ankisyncd)启动会检测本机ip是否发生变化，如果发生变动，会自动修改电脑Anki的IP，并将详细的新地址打印到服务端黑色窗口，需要你手动填写到安卓Ankidroid的相应界面。<br><a href="https://imgtu.com/i/TNF8h9"><img src="https://s4.ax1x.com/2021/12/24/TNF8h9.jpg" alt="TNF8h9.jpg" loading="lazy"></a></p><p><strong>参考：</strong></p><p><a href="https://github.com/ankicommunity/anki-sync-server-rs">ankicommunity/anki-sync-server-rs</a></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
            <tag> 搭建Anki服务器 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
